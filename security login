import os, csv
import flet as ft
import flet as Timer
import threading
import calendar
import pandas as pd
import matplotlib.pyplot as plt
import time
from datetime import date, datetime,timedelta, time as dt_time
import uuid
import shutil
import validators
import base64
from urllib.parse import urlparse
import json
from dotenv import load_dotenv
from google.generativeai import configure, GenerativeModel
import pandas as pd
import re
import textwrap
import random
import hashlib
import binascii
import re

# ---------------------------
# CONFIGURACIÓN GLOBAL Y DATOS
# ---------------------------

# ————————————————
# Límite de uso (2 horas)
USAGE_LIMIT_SECONDS = 2 * 60 * 60
session_start_time = time.time()
def check_usage_limit():
    return (time.time() - session_start_time) > USAGE_LIMIT_SECONDS
# ————————————————

current_month_index = 2  # Empezamos en Marzo (índice 2)
current_year = 2025
month_names = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
]

current_filter = "Todos"

notes_data_all = [
    {"calificacion": "3.3", "asignatura": "Español",      "fecha": "2025-08-25", "timestamp": 1692921600},
    {"calificacion": "4.0", "asignatura": "Valores",      "fecha": "2025-08-26", "timestamp": 1693008000},
    {"calificacion": "4.5", "asignatura": "Matemáticas",  "fecha": "2025-08-27", "timestamp": 1693094400},
    {"calificacion": "5.0", "asignatura": "Inglés",       "fecha": "2025-08-28", "timestamp": 1693180800},
    {"calificacion": "3.0", "asignatura": "Informática",  "fecha": "2025-08-29", "timestamp": 1693267200},
    {"calificacion": "4.0", "asignatura": "Español",      "fecha": "2025-08-30", "timestamp": 1693353600}
]

# Técnicas de estudio
techniques = [
    {"id": 1, "titulo": "Técnica Pomodoro", "descripcion": "Estudia 25 min + 5 min descanso.", "categoria": "Recientes", "favorita": False},
    {"id": 2, "titulo": "SMART",            "descripcion": "Objetivos Specific–Measurable…",      "categoria": "Recientes", "favorita": False},
    {"id": 3, "titulo": "Mapas mentales",   "descripcion": "Diagramas que conectan conceptos.",     "categoria": "Todos",     "favorita": False},
    {"id": 4, "titulo": "SQ3R",             "descripcion": "Survey–Question–Read–Recite–Review.",  "categoria": "Todos",     "favorita": False},
]

# Cronogramas en memoria
cronogram_events = [
    {
        "id": 1,
        "title": "Relajo",
        "start": datetime(2025, 8, 8, 10, 0),
        "end": datetime(2025, 8, 8, 11, 0),
        "completed": False
    },
]   # cada entrada: {id, technique_id, title, start:datetime, end:datetime}

current_user = {
    "name": "Juan Perez",
    "photo_url": "https://cdn-icons-png.flaticon.com/512/219/219983.png"
}

# ——— Nuevas listas globales ———
urgent_events = [
    {"title": "Entrega Parcial Física", "date": date(2025, 4, 15), "type": "tarea"},
    {"title": "Día del Maestro",        "date": date(2025, 5, 5),  "type": "feriado"},
    # … añade los que necesites
]

reminders = []

# ---------------------------
# UTILIDADES
# ---------------------------
def change_month(delta: int):
    global current_month_index, current_year
    m = current_month_index + delta
    if m > 11:
        m = 0; current_year += 1
    elif m < 0:
        m = 11; current_year -= 1
    current_month_index = m
    NavigationController.update_view("Calendario")


def build_popup_menu():
    return ft.PopupMenuButton(
        icon=ft.Icons.MENU, icon_color=ft.Colors.BLACK,
        items=[
            ft.PopupMenuItem(text="Inicio",    on_click=lambda e: NavigationController.update_view("Inicio")),
            ft.PopupMenuItem(text="Notas",     on_click=lambda e: NavigationController.update_view("Notas")),
            ft.PopupMenuItem(text="Calendario",on_click=lambda e: NavigationController.update_view("Calendario")),
            ft.PopupMenuItem(text="Técnicas",  on_click=lambda e: NavigationController.update_view("Tecnicas")),
            ft.PopupMenuItem(text="Clases",    on_click=lambda e: NavigationController.update_view("Clases")),
            ft.PopupMenuItem(text="Mensajería",on_click=lambda e: NavigationController.update_view("Mensajeria")),
            ft.PopupMenuItem(text="ChatBot",   on_click=lambda e: NavigationController.update_view("ChatBot")),
            # Recuperar ya no va aquí
        ]
    )


# ---------------------------
# COMPONENTES COMUNES
# ---------------------------
class Carousel(ft.Control):
    def __init__(self, images: list, width: int, height: int, **kwargs):
        super().__init__(**kwargs)
        self.images = images; self.width = width; self.height = height
        self.current_page = 0; self.tabs_control = None
    def _get_control_name(self): return "container"
    def build(self):
        self.tabs_control = ft.Tabs(
            selected_index=self.current_page, divider_height=0,
            tabs=[ft.Tab(content=ft.Image(src=url, fit=ft.ImageFit.COVER, width=self.width, height=self.height))
                  for url in self.images]
        )
        indicators = [
            ft.Container(width=10, height=10,
                         bgcolor=ft.Colors.BLUE if i==self.current_page else ft.Colors.GREY,
                         border_radius=5, margin=ft.margin.all(4))
            for i in range(len(self.images))
        ]
        return ft.Stack([
            self.tabs_control,
            ft.Container(content=ft.IconButton(icon=ft.Icons.ARROW_BACK, icon_color=ft.Colors.WHITE, on_click=self.prev_page),
                         alignment=ft.alignment.center_left, padding=ft.padding.all(10)),
            ft.Container(content=ft.IconButton(icon=ft.Icons.ARROW_FORWARD, icon_color=ft.Colors.WHITE, on_click=self.next_page),
                         alignment=ft.alignment.center_right, padding=ft.padding.all(10)),
            ft.Container(content=ft.Row(controls=indicators, alignment=ft.MainAxisAlignment.CENTER),
                         alignment=ft.alignment.bottom_center, padding=ft.padding.only(bottom=10)),
        ])
    def prev_page(self,e):
        p=self.current_page-1 if self.current_page>0 else len(self.images)-1
        self.current_page=p; self.tabs_control.selected_index=p; self.update()
    def next_page(self,e):
        p=self.current_page+1 if self.current_page<len(self.images)-1 else 0
        self.current_page=p; self.tabs_control.selected_index=p; self.update()

class SubjectCard(ft.Control):
    def __init__(self, titulo, icon_url, descripcion, estado="Sin terminar", **kwargs):
        super().__init__(**kwargs)
        self.t, self.i, self.d, self.e = titulo, icon_url, descripcion, estado
        self.liked=False
    def _get_control_name(self): return "container"
    def toggle_like(self,e): self.liked=not self.liked; self.update()
    def build(self):
        ic = ft.Icons.FAVORITE if self.liked else ft.Icons.FAVORITE_BORDER
        size = 40 if self.liked else 30
        return ft.Container(
            width=250, bgcolor="white", border_radius=ft.border_radius.all(12), padding=ft.padding.all(20),
            on_click=lambda e: NavigationController.update_view("Clases"),
            content=ft.Column([
                ft.Row([
                    ft.Image(src=self.i, width=40, height=40),
                    ft.Container(expand=True),
                    ft.AnimatedSwitcher(
                        content=ft.Icon(ic, color="red", size=size),
                        duration=300
                    )
                ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                ft.Divider(height=10, color="transparent"),
                ft.Text(self.t, size=20, weight=ft.FontWeight.BOLD, color="#2B2B2B"),
                ft.Text(self.d, size=14, color="#4B4B4B"),
                ft.Divider(height=10, color="transparent"),
                ft.Text(self.e, size=12, color="#9CA3AF", italic=True),
            ], spacing=5)
        )

class TechniqueCard(ft.Control):
    def __init__(self, tech, **kwargs):
        super().__init__(**kwargs)
        self.tech=tech
    def _get_control_name(self): return "container"
    def toggle_fav(self,e):
        self.tech["favorita"]=not self.tech["favorita"]; self.update()
    def add_to_schedule(self,e):
        dlg = ft.AlertDialog(
            title=ft.Text(f"Añadir cronograma: {self.tech['titulo']}"),
            content=ft.Column([
                ft.TextField(label="Título", value=self.tech["titulo"]),
                ft.Row([ft.Text("Inicio:"), ft.DatePicker(value=date.today()), ft.TimePicker(value=ft.Time(9,0))]),
                ft.Row([ft.Text("Fin:"),    ft.DatePicker(value=date.today()), ft.TimePicker(value=ft.Time(9,25))]),
            ], spacing=10),
            actions=[
                ft.TextButton("Cancelar", on_click=lambda e: self.page.dialog.close()),
                ft.TextButton("Guardar",  on_click=lambda e,tc=self.tech: self._save_block(e,tc))
            ]
        )
        self.page.dialog=dlg; dlg.open=True; self.page.update()
    def _save_block(self,e,tech):
        c=self.page.dialog.content.controls
        title=c[0].value
        d1,t1=c[1].controls[1].value, c[1].controls[2].value
        d2,t2=c[2].controls[1].value, c[2].controls[2].value
        cronogram_events.append({
            "id": len(cronogram_events)+1,
            "technique_id": tech["id"],
            "title": title,
            "start": datetime.combine(d1,t1),
            "end":   datetime.combine(d2,t2)
        })
        self.page.dialog.open=False; self.page.update()
    def build(self):
        icon = ft.Icons.FAVORITE if self.tech["favorita"] else ft.Icons.FAVORITE_BORDER
        color= "red" if self.tech["favorita"] else "#CCC"
        return ft.Container(
            padding=ft.padding.all(12), bgcolor="#F0F8FF", border_radius=ft.border_radius.all(12),
            content=ft.Row([
                ft.Column([
                    ft.Text(self.tech["titulo"], size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(self.tech["descripcion"], size=14, color="#555")
                ], expand=True),
                ft.IconButton(icon=icon, icon_color=color, on_click=self.toggle_fav),
                ft.IconButton(icon=ft.Icons.ADD, icon_color="#1E40AF", on_click=self.add_to_schedule)
            ], alignment=ft.MainAxisAlignment.START)
        )

def home_calendar_style_card(titulo, icon_url, descripcion, estado="Programado"):
    return ft.Container(
        width=250, bgcolor="white", border_radius=ft.border_radius.all(12), padding=ft.padding.all(20),
        content=ft.Column([
            ft.Row([ft.Image(src=icon_url,width=40,height=40), ft.Container(expand=True), ft.Icon(ft.Icons.EVENT,color="red")],
                   alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            ft.Divider(height=10, color="transparent"),
            ft.Text(titulo, size=20, weight=ft.FontWeight.BOLD, color="#2B2B2B"),
            ft.Text(descripcion, size=14, color="#4B4B4B"),
            ft.Divider(height=10, color="transparent"),
            ft.Text(estado, size=12, color="#9B88FF", italic=True)
        ], spacing=5)
    )

# ---------------------------
# BASE PAGE
# ---------------------------
class BasePage:
    def __init__(self, page: ft.Page = None):
        self.page = page
    def build(self) -> ft.Control:
        raise NotImplementedError



PASSWORD_HASH_ITERATIONS = 100000

def _hash_password(password: str, salt: bytes = None) -> tuple:
    """Genera hash seguro de contraseña con sal"""
    if salt is None:
        salt = os.urandom(16)
    
    key = hashlib.pbkdf2_hmac(
        'sha256',
        password.encode('utf-8'),
        salt,
        PASSWORD_HASH_ITERATIONS
    )
    return (binascii.hexlify(key).decode(), binascii.hexlify(salt).decode())

def _verify_password(stored_hash: str, provided_password: str, salt: str) -> bool:
    """Verifica contraseña contra hash almacenado"""
    salt_bytes = binascii.unhexlify(salt)
    new_hash, _ = _hash_password(provided_password, salt_bytes)
    return new_hash == stored_hash

def _load_users() -> dict:
    """Carga usuarios desde CSV"""
    users = {}
    try:
        if os.path.exists("users.csv"):
            with open("users.csv", "r", newline="") as f:
                reader = csv.DictReader(f)
                for row in reader:
                    users[row['email']] = row
    except Exception as e:
        print(f"Error loading users: {str(e)}")
    return users

def _save_user(email: str, name: str, password_hash: str, salt: str):
    """Guarda nuevo usuario en CSV"""
    fieldnames = ["email", "name", "password_hash", "salt", "photo_url"]
    file_exists = os.path.exists("users.csv")
    
    with open("users.csv", "a", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        if not file_exists:
            writer.writeheader()
            
        writer.writerow({
            "email": email,
            "name": name,
            "password_hash": password_hash,
            "salt": salt,
            "photo_url": ""
        })





class LoginPage(BasePage):
    def __init__(self, page: ft.Page):
        super().__init__(page)
        self.page = page
        
        # Configuración segura de fuentes
        try:
            fonts = self.page.fonts
            if fonts is None:
                self.page.fonts = {}
        except AttributeError:
            self.page.fonts = {}
        
        if "Roboto" not in self.page.fonts:
            self.page.fonts["Roboto"] = "https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
            self.page.theme = ft.Theme(font_family="Roboto")
        
        self.dark_mode = self.page.theme_mode == ft.ThemeMode.DARK
        self.login_attempts = 0
        self.max_attempts = 3
        
        # Campos del formulario
        self.email_field = self._build_email_field()
        self.pw_field = self._build_password_field()
        
        # Componentes UI
        self.error_banner = self._build_error_banner()
        self.loading_indicator = ft.ProgressRing(visible=False, width=20, height=20)
        
        # Manejo de temas
        self._update_theme()

    def _update_theme(self):
        """Actualiza los componentes según el tema actual"""
        self.dark_mode = self.page.theme_mode == ft.ThemeMode.DARK
        self.page.bgcolor = self._get_background_color()
        self.page.update()

    def _get_background_color(self):
        """Color de fondo basado en el modo"""
        if self.dark_mode:
            return ft.LinearGradient(
                begin=ft.alignment.top_left,
                end=ft.alignment.bottom_right,
                colors=[ft.Colors.INDIGO_900, ft.Colors.BLUE_900]
            )
        return ft.LinearGradient(
            begin=ft.alignment.top_left,
            end=ft.alignment.bottom_right,
            colors=[ft.Colors.INDIGO_50, ft.Colors.BLUE_50]
        )

    def _build_email_field(self):
        return ft.TextField(
            label="Correo electrónico",
            hint_text="tucorreo@universidad.edu",
            prefix_icon=ft.Icons.EMAIL,
            keyboard_type=ft.KeyboardType.EMAIL,
            expand=True,
            on_change=self._validate_email,
            autofill_hints=["email"],
            text_size=14,
            border_radius=12,
            border_color=ft.Colors.GREY_400,
            focused_border_color=ft.Colors.INDIGO_600,
            border_width=1.5,
            filled=True,
            fill_color=ft.Colors.with_opacity(0.05, ft.Colors.BLACK) if self.dark_mode else ft.Colors.with_opacity(0.05, ft.Colors.WHITE),
        )

    def _build_password_field(self):
        return ft.TextField(
            label="Contraseña",
            prefix_icon=ft.Icons.LOCK,
            password=True,
            can_reveal_password=True,
            expand=True,
            on_submit=self._on_login,
            autofill_hints=["password"],
            text_size=14,
            border_radius=12,
            border_color=ft.Colors.GREY_400,
            focused_border_color=ft.Colors.INDIGO_600,
            border_width=1.5,
            filled=True,
            fill_color=ft.Colors.with_opacity(0.05, ft.Colors.BLACK) if self.dark_mode else ft.Colors.with_opacity(0.05, ft.Colors.WHITE),
        )

    def _build_password_field(self):
        return ft.TextField(
            label="Contraseña",
            prefix_icon=ft.Icons.LOCK,
            password=True,
            can_reveal_password=True,
            expand=True,
            on_submit=self._on_login,
            autofill_hints=["password"],
            text_size=14,
            border_radius=12
        )

    def _build_error_banner(self):
        return ft.Container(
            visible=False,
            padding=ft.padding.symmetric(horizontal=10, vertical=8),
            border_radius=ft.border_radius.all(8),
            bgcolor=ft.Colors.RED_100 if not self.dark_mode else ft.Colors.RED_900,
            content=ft.Row([
                ft.Icon(ft.Icons.ERROR, color=ft.Colors.RED),
                ft.Text("", expand=True, color=ft.Colors.RED)
            ]),
            animate=ft.Animation(300, "easeOut")
        )

    def _validate_email(self, e):
        email = self.email_field.value.strip()
        if not email:
            self.email_field.error_text = None
            self.page.update()
            return
            
        # Validación profesional de email
        pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
        if not re.match(pattern, email):
            self.email_field.error_text = "Formato de email inválido"
        else:
            self.email_field.error_text = None
            
        self.page.update()

    def _validate_form(self):
        valid = True
        email = self.email_field.value.strip()
        password = self.pw_field.value
        
        # Validación de email
        if not email:
            self.email_field.error_text = "Email requerido"
            valid = False
        elif self.email_field.error_text:
            valid = False
            
        # Validación de contraseña
        if not password:
            self.pw_field.error_text = "Contraseña requerida"
            valid = False
        elif len(password) < 8:
            self.pw_field.error_text = "Mínimo 8 caracteres"
            valid = False
        else:
            self.pw_field.error_text = None
            
        self.page.update()
        return valid

    def _on_login(self, e):
        # Verificar límite de intentos
        if self.login_attempts >= self.max_attempts:
            self._show_error("Demasiados intentos. Intente más tarde")
            return
            
        if not self._validate_form():
            self.login_attempts += 1
            return
            
        email = self.email_field.value.strip()
        password = self.pw_field.value
        
        # Mostrar carga
        self.loading_indicator.visible = True
        self.error_banner.visible = False
        self.page.update()
        
        try:
            # Autenticar usuario
            user, error = self._authenticate_user(email, password)
            
            if error:
                self._show_error(error)
                self.login_attempts += 1
                return
                
            # Guardar sesión de usuario
            self.page.client_storage.set("current_user", {
                "name": user["name"],
                "email": email,
                "photo_url": user.get("photo_url", "")
            })
            
            # Limpiar campos sensibles
            self.pw_field.value = ""
            self.page.update()
            
            # Redirigir a la página principal
            NavigationController.update_view("Inicio")
            
        except Exception as err:
            self._show_error(f"Error en autenticación: {str(err)}")
        finally:
            self.loading_indicator.visible = False
            self.page.update()

    def _authenticate_user(self, email, password):
        """Autenticación segura con CSV"""
        users = _load_users()
        
        if email not in users:
            return None, "Usuario no registrado"
        
        user_data = users[email]
        stored_hash = user_data["password_hash"]
        salt = user_data["salt"]
        
        if not _verify_password(stored_hash, password, salt):
            return None, "Contraseña incorrecta"
        
        return user_data, None

    def _show_error(self, message):
        """Muestra mensaje de error profesional"""
        self.error_banner.content.controls[1].value = message
        self.error_banner.visible = True
        self.page.update()
        
        # Ocultar después de 5 segundos
        if hasattr(self, "_error_timer"):
            self._error_timer.cancel()
            
        self._error_timer = threading.Timer(5.0, self._hide_error)
        self._error_timer.start()

    def _hide_error(self):
        """Oculta el mensaje de error"""
        self.error_banner.visible = False
        self.page.update()

    
    def _build_feature_row(self, icon, text):
        return ft.Row([
            ft.Icon(icon, color=ft.Colors.GREEN_300, size=20),
            ft.Container(width=12),
            ft.Text(text, size=16, color=ft.Colors.WHITE, expand=True)
        ])

    def _social_login(self, provider):
        """Simulación de login con redes sociales"""
        self.loading_indicator.visible = True
        self.page.update()
        
        try:
            # Generar usuario temporal
            fake_email = f"usuario_{provider.lower()}@ejemplo.com"
            fake_name = f"Usuario {provider}"
            
            # Registrar si no existe
            users = _load_users()
            if fake_email not in users:
                password_hash, salt = _hash_password("generated_password")
                _save_user(fake_email, fake_name, password_hash, salt)
            
            # Guardar sesión
            self.page.client_storage.set("current_user", {
                "name": fake_name,
                "email": fake_email,
                "photo_url": ""
            })
            
            NavigationController.update_view("Inicio")
            
        except Exception as err:
            self._show_error(f"Error con {provider}: {str(err)}")
        finally:
            self.loading_indicator.visible = False
            self.page.update()
    


    def _build_feature_row(self, icon, text):
        """Construye una fila de característica para el panel izquierdo"""
        return ft.Row([
            ft.Icon(icon, color=ft.Colors.GREEN_300, size=20),
            ft.Container(width=12),
            ft.Text(text, size=16, color=ft.Colors.WHITE, expand=True)
        ])
    
    def _build_compact_feature(self, icon, text):
        return ft.Row([
            ft.Icon(icon, color=ft.Colors.GREEN_300, size=16),  # Icono más pequeño
            ft.Container(width=8),  # Espacio reducido
            ft.Text(text, size=14, color=ft.Colors.WHITE)  # Texto más pequeño
        ])
    




    def _build_professional_feature(self, icon, title, description):
        """Construye una característica con diseño premium"""
        return ft.Row(
            [
                ft.Container(
                    ft.Icon(icon, size=28, color=ft.Colors.CYAN_200),
                    width=50,
                    height=50,
                    alignment=ft.alignment.center,
                    bgcolor=ft.Colors.with_opacity(0.15, ft.Colors.CYAN_200),
                    border_radius=12
                ),
                ft.VerticalDivider(width=20, color=ft.Colors.TRANSPARENT),
                ft.Column(
                    [
                        ft.Text(title, 
                                size=18, 
                                weight=ft.FontWeight.W_600,
                                color=ft.Colors.WHITE if self.dark_mode else ft.Colors.INDIGO_900),
                        ft.Container(height=5),
                        ft.Text(description, 
                                size=14, 
                                color=ft.Colors.BLUE_200 if self.dark_mode else ft.Colors.INDIGO_700)
                    ],
                    spacing=0,
                    expand=True
                )
            ],
            vertical_alignment=ft.CrossAxisAlignment.START
        )

    def _build_form_content(self):
        """Construye el contenido del formulario con diseño premium"""
        return ft.Column(
            controls=[
                ft.Row([
                    ft.Icon(ft.Icons.SCHOOL, size=36, color=ft.Colors.INDIGO_700),
                    ft.Container(width=12),
                    ft.Text("Point List", 
                            size=28, 
                            weight=ft.FontWeight.W_700,
                            color=ft.Colors.INDIGO_900 if not self.dark_mode else ft.Colors.WHITE),
                ], alignment=ft.MainAxisAlignment.CENTER),
                
                ft.Container(height=24),
                
                ft.Text("Inicia sesión en tu cuenta", 
                        size=18,
                        color=ft.Colors.GREY_700 if not self.dark_mode else ft.Colors.GREY_300,
                        text_align=ft.TextAlign.CENTER),
                
                ft.Container(height=24),
                
                self.error_banner,
                
                self.email_field,
                ft.Container(height=12),
                
                self.pw_field,
                ft.Container(height=24),
                
                # Botón principal
                ft.ElevatedButton(
                    "Iniciar sesión",
                    on_click=self._on_login,
                    bgcolor=ft.Colors.INDIGO_700,
                    color=ft.Colors.WHITE,
                    style=ft.ButtonStyle(
                        shape=ft.RoundedRectangleBorder(radius=12),
                        padding=ft.padding.symmetric(vertical=16),
                        elevation=2,
                        overlay_color=ft.Colors.with_opacity(0.1, ft.Colors.WHITE)
                    ),
                    expand=True
                ),
                
                ft.Container(height=16),
                
                # Opciones adicionales
                ft.Row([
                    ft.Checkbox(
                        value=True, 
                        active_color=ft.Colors.INDIGO_700,
                        fill_color=ft.Colors.WHITE if self.dark_mode else None
                    ),
                    ft.Text("Recordar sesión", 
                            color=ft.Colors.GREY_700 if not self.dark_mode else ft.Colors.GREY_300, 
                            expand=True),
                    
                    ft.TextButton(
                        "¿Olvidaste tu contraseña?",
                        on_click=lambda e: NavigationController.update_view("Recuperar"),
                        style=ft.ButtonStyle(
                            color=ft.Colors.INDIGO_700
                        )
                    )
                ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                
                ft.Container(height=24),
                
                # Separador
                ft.Row([
                    ft.Container(content=ft.Divider(height=1, color=ft.Colors.GREY_300), expand=True),
                    ft.Text("o continuar con", color=ft.Colors.GREY_500, size=12),
                    ft.Container(content=ft.Divider(height=1, color=ft.Colors.GREY_300), expand=True),
                ], vertical_alignment=ft.CrossAxisAlignment.CENTER),
                
                ft.Container(height=16),
                
                # Redes sociales
                ft.Row([
                    ft.IconButton(
                        icon=ft.Icons.ANDROID,  # Google
                        icon_size=32,
                        icon_color=ft.Colors.RED_700,
                        style=ft.ButtonStyle(
                            shape=ft.RoundedRectangleBorder(radius=8),
                            bgcolor=ft.Colors.with_opacity(0.1, ft.Colors.RED)
                        ),
                        on_click=lambda e: self._social_login("Google")
                    ),
                    ft.IconButton(
                        icon=ft.Icons.FACEBOOK,
                        icon_size=32,
                        icon_color=ft.Colors.BLUE_700,
                        style=ft.ButtonStyle(
                            shape=ft.RoundedRectangleBorder(radius=8),
                            bgcolor=ft.Colors.with_opacity(0.1, ft.Colors.BLUE)
                        ),
                        on_click=lambda e: self._social_login("Facebook")
                    ),
                    ft.IconButton(
                        icon=ft.Icons.APPLE,
                        icon_size=32,
                        icon_color=ft.Colors.BLACK,
                        style=ft.ButtonStyle(
                            shape=ft.RoundedRectangleBorder(radius=8),
                            bgcolor=ft.Colors.with_opacity(0.1, ft.Colors.BLACK)
                        ),
                        on_click=lambda e: self._social_login("Apple")
                    ),
                ], alignment=ft.MainAxisAlignment.CENTER),
                
                ft.Container(height=24),
                
                # Registro
                ft.Row([
                    ft.Text("¿No tienes cuenta?", 
                           color=ft.Colors.GREY_600 if not self.dark_mode else ft.Colors.GREY_400),
                    ft.TextButton(
                        "Regístrate aquí",
                        on_click=lambda e: NavigationController.update_view("Registro"),
                        style=ft.ButtonStyle(
                            padding=ft.padding.symmetric(horizontal=8),
                            color=ft.Colors.INDIGO_700
                        )
                    )
                ], alignment=ft.MainAxisAlignment.CENTER),
                
                # Indicador de carga
                ft.Row([self.loading_indicator], alignment=ft.MainAxisAlignment.CENTER)
            ],
            spacing=8,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER
        )
    
    def build(self):
        # Fondo unificado para toda la página
        self.page.bgcolor = self._get_background_color()
        
        # Contenido principal
        content = ft.Row(
            [
                ft.Container(
                    expand=2,
                    padding=ft.padding.symmetric(horizontal=40, vertical=60),
                    visible=self.page.width > 768,
                    content=ft.Column(
                        [
                            ft.Column(
                                [
                                    ft.Row(
                                        [
                                            ft.Container(
                                                ft.Icon(ft.Icons.SCHOOL, size=36, 
                                                    color=ft.Colors.AMBER_200 if self.dark_mode else ft.Colors.INDIGO_700),
                                                padding=10,
                                                bgcolor=ft.Colors.with_opacity(0.15,  # Corregido aquí
                                                                            ft.Colors.AMBER_200 if self.dark_mode else ft.Colors.INDIGO_300),
                                                border_radius=20
                                            ),
                                            ft.VerticalDivider(width=20, color=ft.Colors.TRANSPARENT),
                                            ft.Text("Point List",
                                                    size=36,
                                                    weight=ft.FontWeight.W_700,
                                                    color=ft.Colors.WHITE if self.dark_mode else ft.Colors.INDIGO_900)
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER
                                    ),
                                    ft.Container(height=10),
                                    ft.Text("Plataforma Académica Inteligente",
                                            size=16,
                                            color=ft.Colors.BLUE_200 if self.dark_mode else ft.Colors.INDIGO_700,
                                            text_align=ft.TextAlign.CENTER)
                                ],
                                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                                spacing=0
                            ),
                            
                            ft.Divider(height=60, color=ft.Colors.with_opacity(0.2,  # Corregido aquí
                                                                            ft.Colors.WHITE if self.dark_mode else ft.Colors.INDIGO_300)),
                            
                            ft.Column(
                                [
                                    self._build_professional_feature(
                                        ft.Icons.LIBRARY_BOOKS, 
                                        "Gestión de Materiales",
                                        "Organiza tus apuntes, libros y recursos en un solo lugar"
                                    ),
                                    self._build_professional_feature(
                                        ft.Icons.CALENDAR_TODAY, 
                                        "Planificador Académico",
                                        "Programa tus estudios y nunca pierdas un examen"
                                    ),
                                    self._build_professional_feature(
                                        ft.Icons.GROUP_ADD, 
                                        "Colaboración",
                                        "Comparte recursos y estudia con compañeros"
                                    ),
                                    self._build_professional_feature(
                                        ft.Icons.ANALYTICS, 
                                        "Seguimiento de Progreso",
                                        "Visualiza tu evolución y mejora tu rendimiento"
                                    ),
                                ],
                                spacing=30
                            ),
                            
                            ft.Divider(height=60, color=ft.Colors.with_opacity(0.2,  # Corregido aquí
                                                                            ft.Colors.WHITE if self.dark_mode else ft.Colors.INDIGO_300)),
                            
                            # Testimonio
                            ft.Container(
                                padding=20,
                                border_radius=15,
                                bgcolor=ft.Colors.with_opacity(0.15, 
                                                            ft.Colors.INDIGO_300 if self.dark_mode else ft.Colors.INDIGO_100),
                                border=ft.border.all(1, ft.Colors.with_opacity(0.2, 
                                                                            ft.Colors.WHITE if self.dark_mode else ft.Colors.INDIGO_300)),
                                content=ft.Column(
                                    [
                                        ft.Row(
                                            [
                                                ft.Icon(ft.Icons.FORMAT_QUOTE, 
                                                        color=ft.Colors.AMBER_200 if self.dark_mode else ft.Colors.INDIGO_700, 
                                                        size=30,
                                                        rotate=ft.Rotate(angle=3.14, alignment=ft.alignment.center)),
                                                ft.Text(
                                                    '"Point List transformó completamente mi forma de estudiar. '
                                                    'Ahora soy más organizado y mis notas han mejorado significativamente."',
                                                    size=16,
                                                    color=ft.Colors.WHITE if self.dark_mode else ft.Colors.INDIGO_900,
                                                    italic=True,
                                                    expand=True
                                                ),
                                                ft.Icon(ft.Icons.FORMAT_QUOTE, 
                                                        color=ft.Colors.AMBER_200 if self.dark_mode else ft.Colors.INDIGO_700, 
                                                        size=30),
                                            ],
                                            vertical_alignment=ft.CrossAxisAlignment.CENTER
                                        ),
                                        ft.Container(height=15),
                                        ft.Row(
                                            [
                                                ft.CircleAvatar(
                                                    foreground_image_src="https://i.imgur.com/3Zq0YQq.jpg",  # ¡CORREGIDO!
                                                    radius=20,
                                                    bgcolor=ft.Colors.GREY
                                                ),
                                                ft.VerticalDivider(width=15, color=ft.Colors.TRANSPARENT),
                                                ft.Column(
                                                    [
                                                        ft.Text("María López", 
                                                                size=14, 
                                                                weight=ft.FontWeight.W_600,
                                                                color=ft.Colors.WHITE if self.dark_mode else ft.Colors.INDIGO_900),
                                                        ft.Text("Estudiante de Ingeniería", 
                                                                size=12, 
                                                                color=ft.Colors.BLUE_200 if self.dark_mode else ft.Colors.INDIGO_700)
                                                    ],
                                                    spacing=2
                                                )
                                            ]
                                        )
                                    ]
                                )
                            )
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        spacing=0
                    )
                ),
                
                ft.Container(
                    expand=3,
                    alignment=ft.alignment.center,
                    padding=ft.padding.symmetric(horizontal=20, vertical=40),
                    content=ft.Column(
                        [
                            ft.Container(
                                content=self._build_form_content(),
                                width=min(500, self.page.width - 40),
                                padding=ft.padding.all(40),
                                bgcolor=ft.Colors.with_opacity(0.92, ft.Colors.WHITE) if not self.dark_mode else ft.Colors.with_opacity(0.85, ft.Colors.SURFACE_VARIANT),
                                border_radius=ft.border_radius.all(24),
                                shadow=ft.BoxShadow(
                                    blur_radius=25, 
                                    spread_radius=2,
                                    offset=ft.Offset(0, 6), 
                                    color=ft.Colors.with_opacity(0.2, ft.Colors.BLACK)
                                )
                            )
                        ],
                        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                        scroll=ft.ScrollMode.AUTO,
                        expand=True
                    )
                )
            ],
            expand=True,
            spacing=0
        )
        
        if self.page.width <= 768:
            return ft.Column(
                [
                    ft.Container(height=40),
                    ft.Container(
                        content=self._build_form_content(),
                        padding=ft.padding.symmetric(horizontal=20, vertical=30),
                        bgcolor=ft.Colors.with_opacity(0.92, ft.Colors.WHITE) if not self.dark_mode else ft.Colors.with_opacity(0.85, ft.Colors.SURFACE_VARIANT),
                        border_radius=ft.border_radius.all(24),
                        shadow=ft.BoxShadow(
                            blur_radius=25, 
                            spread_radius=2,
                            offset=ft.Offset(0, 6), 
                            color=ft.Colors.with_opacity(0.2, ft.Colors.BLACK)
                        ),
                        margin=ft.margin.symmetric(horizontal=20)
                    )
                ],
                scroll=ft.ScrollMode.AUTO,
                expand=True
            )
        
        return content


    def _social_login(self, provider):
        """Maneja login con redes sociales"""
        self.loading_indicator.visible = True
        self.page.update()
        
        try:
            # Solo para demostración - en producción usar OAuth
            fake_user = {
                "name": f"Usuario {provider}",
                "email": f"usuario_{provider.lower()}@ejemplo.com",
                "password": self._hash_password("generated_password"),
                "provider": provider
            }
            
            # Guardar usuario en almacenamiento
            users = self.page.client_storage.get("users") or {}
            users[fake_user["email"]] = {
                "name": fake_user["name"],
                "password": fake_user["password"],
                "provider": fake_user["provider"]
            }
            self.page.client_storage.set("users", users)
            
            # Guardar sesión sin datos sensibles
            self.page.client_storage.set("current_user", {
                "name": fake_user["name"],
                "email": fake_user["email"],
                "photo_url": ""
            })
            
            NavigationController.update_view("Inicio")
            
        except Exception as err:
            self._show_error(f"Error con {provider}: {str(err)}")
        finally:
            self.loading_indicator.visible = False
            self.page.update()






class RegistrationPage(BasePage):  # Asegúrate de heredar de BasePage
    def __init__(self, page: ft.Page):
        super().__init__(page)  # Inicializa la clase base
        self.page = page
        self.dark_mode = self.page.theme_mode == ft.ThemeMode.DARK
        
        # Campos del formulario
        self.name_field = ft.TextField(
            label="Nombre completo", 
            prefix_icon=ft.Icons.PERSON,
            expand=True,
            border_radius=12,
            text_size=14
        )
        self.email_field = ft.TextField(
            label="Correo electrónico", 
            prefix_icon=ft.Icons.EMAIL,
            expand=True,
            border_radius=12,
            text_size=14,
            on_change=self._validate_email
        )
        self.pw_field = ft.TextField(
            label="Contraseña", 
            prefix_icon=ft.Icons.LOCK,
            password=True, 
            expand=True,
            border_radius=12,
            text_size=14
        )
        self.confirm_pw_field = ft.TextField(
            label="Confirmar contraseña", 
            prefix_icon=ft.Icons.LOCK,
            password=True, 
            expand=True,
            border_radius=12,
            text_size=14,
            on_submit=self._register_user
        )
        
        # Componentes UI
        self.error_banner = ft.Container(
            visible=False,
            padding=ft.padding.symmetric(horizontal=10, vertical=8),
            border_radius=ft.border_radius.all(8),
            bgcolor=ft.Colors.RED_100 if not self.dark_mode else ft.Colors.RED_900,
            content=ft.Row([
                ft.Icon(ft.Icons.ERROR, color=ft.Colors.RED),
                ft.Text("", expand=True, color=ft.Colors.RED)
            ]),
            animate=ft.Animation(300, "easeOut")
        )
        
        self.loading_indicator = ft.ProgressRing(visible=False, width=20, height=20)
        
        # Manejo de temas
        self._update_theme()

    def _update_theme(self):
        """Actualiza los componentes según el tema actual"""
        self.dark_mode = self.page.theme_mode == ft.ThemeMode.DARK
        
        # Actualizar colores del banner de error
        self.error_banner.bgcolor = (
            ft.Colors.RED_100 if not self.dark_mode 
            else ft.Colors.RED_900
        )
        
        # Actualizar colores de fondo según el tema
        self.page.bgcolor = (
            ft.Colors.GREY_100 if not self.dark_mode 
            else ft.Colors.DARK_BACKGROUND
        )
        
        self.page.update()

    def _validate_email(self, e):
        email = self.email_field.value.strip()
        if not email:
            self.email_field.error_text = None
            self.page.update()
            return
            
        # Validación profesional de email
        pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
        if not re.match(pattern, email):
            self.email_field.error_text = "Formato de email inválido"
        else:
            self.email_field.error_text = None
            
        self.page.update()

    def _validate_form(self):
        valid = True
        
        # Validar nombre
        if not self.name_field.value.strip():
            self.name_field.error_text = "Nombre requerido"
            valid = False
        else:
            self.name_field.error_text = None
            
        # Validar email
        email = self.email_field.value.strip()
        if not email:
            self.email_field.error_text = "Email requerido"
            valid = False
        else:
            pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
            if not re.match(pattern, email):
                self.email_field.error_text = "Formato de email inválido"
                valid = False
            else:
                self.email_field.error_text = None
                
        # Validar contraseña
        password = self.pw_field.value
        if not password:
            self.pw_field.error_text = "Contraseña requerida"
            valid = False
        elif len(password) < 8:
            self.pw_field.error_text = "Mínimo 8 caracteres"
            valid = False
        else:
            self.pw_field.error_text = None
            
        # Validar confirmación
        if password != self.confirm_pw_field.value:
            self.confirm_pw_field.error_text = "Las contraseñas no coinciden"
            valid = False
        else:
            self.confirm_pw_field.error_text = None
            
        self.page.update()
        return valid

    def _register_user(self, e):
        if not self._validate_form():
            return
            
        email = self.email_field.value.strip()
        name = self.name_field.value.strip()
        password = self.pw_field.value
        
        # Verificar si el usuario ya existe
        users = _load_users()
        if email in users:
            self._show_error("Este email ya está registrado")
            return
            
        # Crear hash seguro
        password_hash, salt = _hash_password(password)
        
        # Guardar en CSV
        _save_user(email, name, password_hash, salt)
        
        # Mensaje de éxito
        self.page.snack_bar = ft.SnackBar(
            ft.Text("¡Registro exitoso! Ahora puedes iniciar sesión"),
            bgcolor=ft.Colors.GREEN
        )
        self.page.snack_bar.open = True
        self.page.update()
        
        # Redirigir a login después de 2 segundos
        threading.Timer(2.0, lambda: NavigationController.update_view("Login")).start()
        
    def _show_error(self, message):
        self.error_banner.content.controls[1].value = message
        self.error_banner.visible = True
        self.page.update()
        
        # Ocultar después de 5 segundos
        threading.Timer(5.0, lambda: setattr(self.error_banner, 'visible', False)).start()

    def build(self):
        # Contenido del formulario
        form_content = ft.Column(
            controls=[
                ft.Text("Crear cuenta", 
                        size=28, 
                        weight=ft.FontWeight.BOLD, 
                        color=ft.Colors.BLUE_700),
                ft.Container(height=24),
                
                self.error_banner,
                
                self.name_field,
                ft.Container(height=12),
                
                self.email_field,
                ft.Container(height=12),
                
                self.pw_field,
                ft.Container(height=12),
                
                self.confirm_pw_field,
                ft.Container(height=24),
                
                ft.ElevatedButton(
                    "Registrarse",
                    on_click=self._register_user,
                    bgcolor=ft.Colors.BLUE_700,
                    color=ft.Colors.WHITE,
                    style=ft.ButtonStyle(
                        shape=ft.RoundedRectangleBorder(radius=12),
                        padding=ft.padding.symmetric(vertical=16)
                    ),
                    expand=True
                ),
                ft.Container(height=24),
                
                ft.Row([
                    ft.Text("¿Ya tienes cuenta?", color=ft.Colors.GREY_600),
                    ft.TextButton(
                        "Inicia sesión aquí",
                        on_click=lambda e: NavigationController.update_view("Login"),
                        style=ft.ButtonStyle(
                            padding=ft.padding.symmetric(horizontal=8),
                            color=ft.Colors.BLUE_700
                        )
                    )
                ], alignment=ft.MainAxisAlignment.CENTER),
                
                # Indicador de carga
                ft.Row([self.loading_indicator], alignment=ft.MainAxisAlignment.CENTER)
            ],
            spacing=8
        )
        
        # Tarjeta del formulario
        form_card = ft.Container(
            content=form_content,
            width=min(440, self.page.width - 40),
            padding=ft.padding.all(32),
            bgcolor=ft.Colors.WHITE if not self.dark_mode else ft.Colors.SURFACE_VARIANT,
            border_radius=ft.border_radius.all(16),
            shadow=ft.BoxShadow(
                blur_radius=12, 
                offset=ft.Offset(0,4), 
                color=ft.Colors.BLACK26
            )
        )
        
        # Contenedor principal que ocupa toda la pantalla
        main_container = ft.Container(
            content=ft.Column(
                [
                    ft.Container(height=20),  # Espacio superior
                    ft.Row(
                        [form_card],
                        alignment=ft.MainAxisAlignment.CENTER,
                        expand=True
                    )
                ],
                expand=True
            ),
            expand=True,
            padding=ft.padding.symmetric(horizontal=20),
            bgcolor=(
                ft.Colors.GREY_100 if not self.dark_mode 
                else ft.Colors.DARK_BACKGROUND
            )
        )
        
        return main_container






# ---------------------------
# PÁGINAS DE LA APLICACIÓN
# ---------------------------




class HomePage(BasePage):
    def __init__(self, page: ft.Page, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        
        # Cargar eventos desde almacenamiento local
        self.cronogram_events = self._load_events()
        
        self.subjects = [
            {"titulo": "Informática", "icon_url": "https://cdn-icons-png.flaticon.com/512/545/545680.png", "descripcion": "Programación, bases de datos y desarrollo web"},
            {"titulo": "Valores", "icon_url": "https://cdn-icons-png.flaticon.com/512/1904/1904425.png", "descripcion": "Ética profesional y desarrollo personal"},
            {"titulo": "Inglés", "icon_url": "https://cdn-icons-png.flaticon.com/512/942/942748.png", "descripcion": "Comunicación avanzada en inglés técnico"},
            {"titulo": "Matemáticas", "icon_url": "https://cdn-icons-png.flaticon.com/512/414/414975.png", "descripcion": "Álgebra, cálculo y matemáticas aplicadas"},
        ]
        self.view_mode = "Materias"
        self.primary_color = ft.Colors.BLUE_700
        self.accent_color = ft.Colors.CYAN_400

    def _switch_view(self, mode: str):
        self.view_mode = mode
        if mode == "Materias":
            NavigationController.update_view("Inicio")
        else:
            NavigationController.update_view("Tecnicas")
        self.page.update()
    
    def _on_card_hover(self, e, card):
        if e.data == "true":
            # Configuración para hover activo
            card.shadow = ft.BoxShadow(
                blur_radius=20,
                spread_radius=-5,
                color=ft.Colors.with_opacity(0.15, ft.Colors.BLACK),
                offset=ft.Offset(0, 5)
            )
            card.border = ft.border.all(1, self.primary_color)
        else:
            # Configuración para estado normal
            card.shadow = ft.BoxShadow(
                blur_radius=10,
                spread_radius=-3,
                color=ft.Colors.with_opacity(0.1, ft.Colors.BLACK),
                offset=ft.Offset(0, 3)
            )
            card.border = ft.border.all(1, ft.Colors.GREY_100)
        card.update()
    
    def _load_events(self):
        """Cargar eventos desde almacenamiento local"""
        try:
            events_json = self.page.client_storage.get("calendar_events")
            if not events_json:
                return []
            
            events = json.loads(events_json)  # Convertir JSON string a lista
            for event in events:
                # Convertir strings de fecha a objetos datetime
                event["start"] = datetime.fromisoformat(event["start"])
                event["end"] = datetime.fromisoformat(event["end"])
            return events
        except Exception as e:
            print(f"Error loading events: {str(e)}")
            return []
    
    def _get_event_color(self, event_type):
            """Color según tipo de evento"""
            colors = {
                "Examen": "#EF4444",    # Rojo
                "Entrega": "#3B82F6",   # Azul
                "General": "#10B981",   # Verde
                "tarea": "#F59E0B",     # Amarillo
                "feriado": "#8B5CF6"    # Violeta
            }
            return colors.get(event_type, "#6B7280")  # Gris por defecto

    def build(self):
        if False:  # Reemplazar con tu lógica real
            return ft.Container(
                expand=True,
                alignment=ft.alignment.center,
                content=ft.Column(
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    controls=[
                        ft.Icon(ft.Icons.ERROR_OUTLINE, size=48, color=ft.Colors.RED_400),
                        ft.Text("Has superado tu límite de uso diario", size=20, weight=ft.FontWeight.BOLD),
                        ft.Text("Vuelve mañana para continuar", size=16, color=ft.Colors.GREY_600),
                        ft.Container(height=20),
                        ft.FilledButton(
                            "Ver mi perfil",
                            icon=ft.Icons.PERSON,
                            on_click=lambda e: NavigationController.update_view("Perfil")
                        )
                    ]
                )
            )

        # 2) Navbar premium (mantener igual)
        navbar = ft.Container(
            bgcolor="white",
            padding=ft.padding.symmetric(horizontal=32, vertical=16),
            shadow=ft.BoxShadow(
                blur_radius=15,
                spread_radius=-5,
                color=ft.Colors.with_opacity(0.1, ft.Colors.BLACK),
                offset=ft.Offset(0, 5)
            ),
            content=ft.Row([
                build_popup_menu(),
                
                # Logo y nombre
                ft.Row([
                    ft.Icon(ft.Icons.SCHOOL, size=28, color=self.primary_color),
                    ft.Text("PointList", size=22, weight=ft.FontWeight.BOLD, 
                        color=ft.Colors.BLUE_GREY_900, font_family="Poppins")
                ], spacing=10),
                
                ft.Container(expand=True),
                
                # Navegación
                ft.Row([
                    ft.TextButton(
                        content=ft.Text(
                            label, 
                            color=ft.Colors.BLUE_GREY_700 if self.page.route != v else self.primary_color,
                            weight=ft.FontWeight.W_600
                        ),
                        on_click=lambda e, v=v: NavigationController.update_view(v)
                    ) for label, v in [("Inicio","Inicio"),("Notas","Notas"),("Calendario","Calendario"),("Clases","Clases")]
                ], spacing=24),
                
                ft.Container(expand=True),
                
                # Perfil (con tu implementación existente)
                ft.Row([
                    ft.Text(current_user["name"], color=ft.Colors.BLUE_GREY_700),
                    ft.GestureDetector(
                        content=ft.CircleAvatar(
                            foreground_image_src=current_user["photo_url"], 
                            radius=16,
                            content=ft.Icon(ft.Icons.PERSON, color=ft.Colors.BLUE_GREY_300) 
                                if not current_user["photo_url"] else None
                        ),
                        on_tap=lambda e: NavigationController.update_view("Perfil")
                    )
                ], spacing=12)
            ], alignment=ft.MainAxisAlignment.CENTER)
        )

        # 3) Hero con gradiente premium (mantener igual)
        hero = ft.Container(
            height=280,
            clip_behavior=ft.ClipBehavior.ANTI_ALIAS,
            border_radius=ft.border_radius.only(bottom_left=32, bottom_right=32),
            gradient=ft.LinearGradient(
                begin=ft.alignment.top_left,
                end=ft.alignment.bottom_right,
                colors=[
                    ft.Colors.with_opacity(0.9, self.primary_color),
                    ft.Colors.with_opacity(0.7, self.accent_color)
                ]
            ),
            content=ft.Stack([
                ft.Container(
                    alignment=ft.alignment.center,
                    padding=ft.padding.only(top=50),
                    content=ft.Column([
                        ft.Text(f"¡Bienvenido, {current_user['name'].split()[0]}!", 
                               size=32, weight=ft.FontWeight.BOLD, color="white"),
                        ft.Text("Tu plataforma educativa todo en uno", 
                               size=18, color=ft.Colors.with_opacity(0.9, ft.Colors.WHITE)),
                        ft.Container(height=30),
                        ft.FilledButton(
                            "Explorar clases",
                            icon=ft.Icons.EXPLORE,
                            style=ft.ButtonStyle(
                                padding=ft.padding.symmetric(vertical=16, horizontal=32),
                                shape=ft.RoundedRectangleBorder(radius=16),
                                bgcolor=ft.Colors.WHITE,
                                color=self.primary_color
                            ),
                            on_click=lambda e: NavigationController.update_view("Clases")
                        )
                    ], horizontal_alignment=ft.CrossAxisAlignment.CENTER)
                )
            ])
        )

        # 4) Filter bar - Diseño premium (mantener igual)
        filter_bar = ft.Container(
            bgcolor="white",
            padding=ft.padding.symmetric(horizontal=24, vertical=12),
            margin=ft.margin.only(top=-24, left=32, right=32, bottom=24),
            shadow=ft.BoxShadow(
                blur_radius=15,
                spread_radius=-5,
                color=ft.Colors.with_opacity(0.1, ft.Colors.BLACK),
                offset=ft.Offset(0, 5)
            ),
            border_radius=ft.border_radius.all(16),
            content=ft.Row([
                # Toggle Materias
                ft.Container(
                    padding=ft.padding.symmetric(horizontal=24, vertical=14),
                    bgcolor=self.primary_color if self.view_mode=="Materias" else ft.Colors.GREY_100,
                    border_radius=ft.border_radius.all(20),
                    ink=True,
                    on_click=lambda e: self._switch_view("Materias"),
                    content=ft.Row([
                        ft.Icon(ft.Icons.BOOK, 
                               color="white" if self.view_mode=="Materias" else ft.Colors.GREY_600),
                        ft.Container(width=10),
                        ft.Text("Materias", 
                               color="white" if self.view_mode=="Materias" else ft.Colors.GREY_700,
                               weight=ft.FontWeight.W_600)
                    ])
                ),
                
                # Toggle Técnicas
                ft.Container(
                    padding=ft.padding.symmetric(horizontal=24, vertical=14),
                    bgcolor=self.primary_color if self.view_mode=="Tecnicas" else ft.Colors.GREY_100,
                    border_radius=ft.border_radius.all(20),
                    ink=True,
                    on_click=lambda e: self._switch_view("Tecnicas"),
                    content=ft.Row([
                        ft.Icon(ft.Icons.PSYCHOLOGY, 
                               color="white" if self.view_mode=="Tecnicas" else ft.Colors.GREY_600),
                        ft.Container(width=10),
                        ft.Text("Técnicas de estudio", 
                               color="white" if self.view_mode=="Tecnicas" else ft.Colors.GREY_700,
                               weight=ft.FontWeight.W_600)
                    ])
                ),
                
                ft.Container(expand=True),
                
                # Buscador premium
                ft.Container(
                    width=320,
                    border_radius=ft.border_radius.all(20),
                    bgcolor=ft.Colors.GREY_50,
                    content=ft.TextField(
                        hint_text="Buscar asignación, materia o técnica...",
                        prefix_icon=ft.Icons.SEARCH,
                        border=ft.InputBorder.NONE,
                        filled=True,
                        bgcolor=ft.Colors.TRANSPARENT,
                        content_padding=ft.padding.symmetric(vertical=14, horizontal=20),
                        on_submit=lambda e: NavigationController.update_view("Notas", e.control.value)
                    )
                )
            ], spacing=16)
        )

        # 5) Subject cards grid - Diseño premium con hover
        def make_card(s):
            card = ft.Container(
                width=360,
                height=180,
                padding=ft.padding.all(20),
                bgcolor="white",
                border_radius=ft.border_radius.all(16),
                border=ft.border.all(1, ft.Colors.GREY_100),
                shadow=ft.BoxShadow(
                    blur_radius=10,
                    spread_radius=-3,
                    color=ft.Colors.with_opacity(0.1, ft.Colors.BLACK),
                    offset=ft.Offset(0, 3)
                ),
                animate=ft.Animation(duration=300, curve="easeOut"),
                content=ft.Column([
                    ft.Row([
                        ft.Container(
                            width=48,
                            height=48,
                            border_radius=24,
                            bgcolor=ft.Colors.with_opacity(0.1, self.primary_color),
                            alignment=ft.alignment.center,
                            content=ft.Image(src=s["icon_url"], width=32, height=32)
                        ),
                        ft.Container(width=16),
                        ft.Text(s["titulo"], size=18, weight=ft.FontWeight.BOLD, 
                            color=ft.Colors.BLUE_GREY_900, expand=True)
                    ]),
                    ft.Container(height=12),
                    ft.Text(s["descripcion"], size=14, color=ft.Colors.BLUE_GREY_600, 
                        max_lines=2, overflow=ft.TextOverflow.ELLIPSIS),
                    ft.Container(expand=True),
                    ft.Row([
                        ft.Text("Ver detalles", color=self.primary_color, weight=ft.FontWeight.W_500),
                        ft.Icon(ft.Icons.ARROW_FORWARD, size=18, color=self.primary_color)
                    ], alignment=ft.MainAxisAlignment.END)
                ])
            )
            card.on_hover = lambda e: self._on_card_hover(e, card)
            return card


        # Crear tarjetas y organizar en filas
        cards = [make_card(s) for s in self.subjects]
        card_rows = []
        for i in range(0, len(cards), 2):
            row_cards = cards[i:i+2]
            if len(row_cards) < 2:
                row_cards.append(ft.Container(expand=True))
            card_rows.append(
                ft.Row(row_cards, spacing=24, alignment=ft.MainAxisAlignment.CENTER)
            )
        
        grid_container = ft.Column(card_rows, spacing=24, scroll=ft.ScrollMode.AUTO)

        # 6) Sidebar premium: promedio y próximas actividades
        # Promedio (mantener tu lógica existente)
        califs = [float(n["calificacion"]) for n in notes_data_all] if notes_data_all else [0]
        avg = sum(califs)/len(califs) if califs else 0.0
        avg_panel = ft.Container(
            padding=ft.padding.all(24),
            bgcolor="white",
            border_radius=ft.border_radius.all(16),
            border=ft.border.all(1, ft.Colors.GREY_100),
            shadow=ft.BoxShadow(
                blur_radius=10,
                spread_radius=-3,
                color=ft.Colors.with_opacity(0.1, ft.Colors.BLACK),
                offset=ft.Offset(0, 3)
            ),
            content=ft.Column([
                ft.Text("Tu Progreso", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE_GREY_900),
                ft.Container(height=16),
                ft.Row([
                    ft.Container(
                        width=80,
                        height=80,
                        border_radius=40,
                        gradient=ft.LinearGradient(
                            begin=ft.alignment.top_left,
                            end=ft.alignment.bottom_right,
                            colors=[self.primary_color, self.accent_color]
                        ),
                        alignment=ft.alignment.center,
                        content=ft.Text(f"{avg:.1f}", size=28, weight=ft.FontWeight.BOLD, color="white")
                    ),
                    ft.Container(width=20),
                    ft.Column([
                        ft.Text("Promedio General", size=16, color=ft.Colors.BLUE_GREY_600),
                        ft.Text(f"{avg:.2f} / 5.0", size=20, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE_GREY_900),
                        ft.Container(height=8),
                        ft.ProgressBar(
                            value=avg/5.0,
                            width=180,
                            bar_height=8,
                            color=self.primary_color,
                            bgcolor=ft.Colors.GREY_200
                        )
                    ])
                ])
            ])
        )
        
        # Próximas actividades (usar eventos cargados)
        # Ordenar eventos por fecha y filtrar los próximos
        ahora = datetime.now()
        forthcoming = []

        for ev in self.cronogram_events:
            try:
                # Asegurarse que start es datetime
                start = ev["start"]
                if isinstance(start, str):
                    start = datetime.fromisoformat(start)
                
                # Solo eventos futuros
                if start >= ahora:
                    # Crear copia para no modificar el original
                    event_copy = ev.copy()
                    event_copy["start"] = start
                    forthcoming.append(event_copy)
            except Exception as e:
                print(f"Error procesando evento: {e}")

        # Ordenar por fecha
        forthcoming = sorted(forthcoming, key=lambda e: e["start"])[:5]

        # Crear lista de controles
        upcoming_controls = []
        for ev in forthcoming:
            title = ev.get("title", "Sin título")
            start_time = ev["start"].strftime("%d %b %Y, %H:%M")
            
            upcoming_controls.append(
                ft.Container(
                    padding=ft.padding.symmetric(horizontal=16, vertical=12),
                    bgcolor="white",
                    border_radius=ft.border_radius.all(12),
                    content=ft.Row([
                        ft.Container(
                            width=6,
                            height=40,
                            bgcolor=self._get_event_color(ev.get("type", "General")),
                            border_radius=ft.border_radius.all(4)
                        ),
                        ft.Container(width=12),
                        ft.Column([
                            ft.Text(title, size=16, weight=ft.FontWeight.BOLD),
                            ft.Text(start_time, size=14, color="#6B7280")
                        ], expand=True)
                    ])
                )
            )

        upcoming_list = ft.Column(
            controls=upcoming_controls,
            spacing=8
        ) if forthcoming else ft.Container(
            content=ft.Text("No hay próximas actividades", italic=True),
            padding=16
        )

            
        sidebar = ft.Column(
            [
                avg_panel,
                ft.Container(height=24),
                ft.Text("Próximas Actividades", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE_GREY_900),
                ft.Container(height=12),
                ft.Container(
                    padding=ft.padding.all(16),
                    bgcolor="white",
                    border_radius=ft.border_radius.all(16),
                    border=ft.border.all(1, ft.Colors.GREY_100),
                    shadow=ft.BoxShadow(
                        blur_radius=10,
                        spread_radius=-3,
                        color=ft.Colors.with_opacity(0.1, ft.Colors.BLACK),
                        offset=ft.Offset(0, 3)
                    ),
                    content=upcoming_list
                )
            ], 
            spacing=0,
            width=320
        )

        # 7) Ensamblar layout premium
        main_content = ft.Container(
            padding=ft.padding.symmetric(horizontal=32, vertical=24),
            content=ft.Row(
                [
                    ft.Container(
                        content=ft.Column(
                            [filter_bar, grid_container],
                            expand=True,
                            spacing=24
                        ),
                        expand=True
                    ),
                    ft.VerticalDivider(width=40, color=ft.Colors.TRANSPARENT),
                    sidebar
                ],
                expand=True,
                spacing=0
            )
        )

        return ft.Column(
            [
                navbar,
                hero,
                main_content
            ],
            expand=True,
            spacing=0
        )

    










    # ---------------------------
# Tarjeta para Técnica de Estudio
# ---------------------------
class MethodCard(ft.Control):
    def __init__(self, key: str, titulo: str, icon_url: str, descripcion: str, **kwargs):
        super().__init__(**kwargs)
        self.key = key
        self.titulo = titulo
        self.icon_url = icon_url
        self.descripcion = descripcion
        self.fav = False

    def _get_control_name(self):
        return "container"

    def toggle_fav(self, e):
        self.fav = not self.fav
        self.update()

    def build(self):
        heart_icon = ft.Icons.FAVORITE if self.fav else ft.Icons.FAVORITE_BORDER
        # Aumentamos ancho, altura, tamaño de texto e iconos
        return ft.Container(
            width=400,
            padding=ft.padding.symmetric(horizontal=32, vertical=24),
            bgcolor="#FFFFFF",
            border_radius=ft.border_radius.all(16),
            shadow=ft.BoxShadow(blur_radius=8, offset=ft.Offset(0,4), color="#00000015"),
            content=ft.Row(
                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                controls=[
                    ft.Row(
                        spacing=16,
                        controls=[
                            ft.Image(src=self.icon_url, width=56, height=56),
                            ft.Column(
                                spacing=8,
                                controls=[
                                    ft.Text(self.titulo, size=22, weight=ft.FontWeight.BOLD),
                                    ft.Text(
                                        self.descripcion,
                                        size=16,
                                        color="#4B5563",
                                        max_lines=4,
                                        overflow=ft.TextOverflow.ELLIPSIS
                                    )
                                ]
                            )
                        ]
                    ),
                    ft.IconButton(
                        icon=heart_icon,
                        icon_color="#EF4444",
                        icon_size= 30,
                        on_click=self.toggle_fav
                    )
                ]
            )
        )

# ---------------------------
# Página de Métodos de Estudio
# ---------------------------
class StudyMethodsPage(BasePage):
    def __init__(self, page: ft.Page, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        self.current_filter = "Recientes"
        self.search_query = ""
        self.initial_filter = getattr(self, "initial_filter", None)

    def _get_control_name(self):
        return "StudyMethodsPage"

    def set_filter(self, f: str):
        self.current_filter = f
        self.page.update()

    def on_search(self, e):
        self.search_query = e.control.value.strip().lower()
        self.page.update()

    def build(self):
        # ——— Banner estático arriba ———
        banner = ft.Container(
            height=200,
            expand=True,
            clip_behavior=ft.ClipBehavior.ANTI_ALIAS,
            content=ft.Stack([
                ft.Image(
                    src="https://images.pexels.com/photos/4145247/pexels-photo-4145247.jpeg",
                    fit=ft.ImageFit.COVER,
                    width=self.page.width or 800,
                    height=200
                ),
                ft.Container(
                    expand=True,
                    bgcolor=ft.Colors.with_opacity(0.3, ft.Colors.BLACK)
                ),
                ft.Container(
                    alignment=ft.alignment.center,
                    content=ft.Text(
                        "Aprende mejor,\nestudia más fácil",
                        size=32,
                        weight=ft.FontWeight.BOLD,
                        color="white",
                        text_align=ft.TextAlign.CENTER
                    )
                )
            ])
        )

        # ——— Navbar pequeño ———
        navbar = ft.Container(
            bgcolor="white",
            padding=ft.padding.symmetric(horizontal=40, vertical=8),
            content=ft.Row([
                build_popup_menu(),
                ft.Container(expand=True),
                 ft.Text(current_user["name"], color="#2B2B2B"),
                # avatar clicable:
                ft.GestureDetector(
                content=ft.CircleAvatar(foreground_image_src=current_user["photo_url"], radius=16),
                on_tap=lambda e: NavigationController.update_view("Perfil")
                )
            ], alignment=ft.MainAxisAlignment.CENTER)
        )

        # ——— Título + buscador ———
        title = ft.Text("Técnicas de estudio", size=24, weight=ft.FontWeight.BOLD)
        search = ft.TextField(
            hint_text="Buscar técnica",
            prefix_icon=ft.Icons.SEARCH,
            width=250,
            on_change=self.on_search
        )
        title_row = ft.Row([title, ft.Container(expand=True), search],
                           alignment=ft.MainAxisAlignment.CENTER)

        # ——— Preparo las tarjetas filtradas ———
        def make_cards(categoria):
            data = [
                t for t in techniques
                if (categoria == "Todos" or t["categoria"] == categoria)
                   and (not self.search_query or self.search_query in t["titulo"].lower())
            ]
            return [
                MethodCard(
                    key=str(t["id"]),
                    titulo=t["titulo"],
                    icon_url=t.get("icon_url", ""),
                    descripcion=t["descripcion"]
                )
                for t in data
            ]

        recientes_cards = make_cards("Recientes")
        todos_cards     = make_cards("Todos")

        # ——— Secciones con scroll horizontal ———
        recientes_section = ft.Column([
            ft.Text("Recientes", weight=ft.FontWeight.BOLD),
            ft.Container(
                height=140,
                scroll=ft.ScrollMode.HORIZONTAL,
                content=ft.Row(recientes_cards, spacing=10)
            )
        ], spacing=8)

        todos_section = ft.Column([
            ft.Text("Todos", weight=ft.FontWeight.BOLD),
            ft.Container(
                height=140,
                scroll=ft.ScrollMode.HORIZONTAL,
                content=ft.Row(todos_cards, spacing=10)
            )
        ], spacing=8)

        # ——— Panel derecho: Mis favoritos ———
                # ——— Panel derecho: Mis favoritos ———
        favs = [c for c in recientes_cards + todos_cards if getattr(c, "fav", False)]
        # 1) Preparamos la lista de controles según haya o no favoritos
        fav_controls = [
            ft.Row([
                ft.Icon(ft.Icons.FAVORITE, color="#EF4444"),
                ft.Text("Mis favoritos", weight=ft.FontWeight.BOLD)
            ])
        ]
        if favs:
            # añadimos cada tarjeta favorita
            fav_controls += [c.build() for c in favs]
        else:
            # o un mensaje de “sin favoritos”
            fav_controls.append(ft.Text("— Sin favoritos —", color="#6B7280"))

        # 2) Luego la usamos con splat sin or en medio
        right = ft.Column(
            controls=fav_controls,
            spacing=12,
            width=200
        )


        # ——— Armo la fila principal ———
        content = ft.Row(
            controls=[
                ft.Column([recientes_section, todos_section], expand=True, spacing=20),
                right
            ],
            expand=True,
            spacing=20
        )

        # ——— Retorno final ———
        return ft.Column([
            navbar,
            banner,
            title_row,
            ft.Divider(height=1, color="#E5E7EB"),
            content
        ], spacing=20, expand=True)
    





import os
import csv
import flet as ft
import threading
import calendar
import pandas as pd
import matplotlib.pyplot as plt
from datetime import date, datetime
import uuid
import time
from functools import lru_cache

# ================ SISTEMA DE TEMAS MEJORADO ================
class AppTheme:
    PRIMARY = "#4361EE"    # Azul vibrante
    SECONDARY = "#8B5CF6"  # Violeta suave
    SUCCESS = "#10B981"    # Verde esmeralda
    WARNING = "#F59E0B"    # Ámbar cálido
    DANGER = "#EF4444"     # Rojo coral
    DARK = "#1E293B"       # Azul oscuro
    LIGHT = "#F8FAFC"      # Blanco azulado
    
    @staticmethod
    def grade_color(grade: float) -> str:
        """Paleta de colores moderna para calificaciones"""
        color_map = {
            5.0: "#10B981",  # Verde esmeralda
            4.5: "#34D399",
            4.0: "#6EE7B7",
            3.5: "#FBBF24",  # Ámbar
            3.0: "#F59E0B",
            2.5: "#EF4444",  # Rojo
            2.0: "#DC2626"
        }
        return next((v for k, v in color_map.items() if grade >= k), "#DC2626")
    
    @staticmethod
    def surface_color(light: str, dark: str = None):
        """Color adaptable al modo claro/oscuro"""
        return light if ft.Page.theme_mode == ft.ThemeMode.LIGHT else dark or light

# ================ SISTEMA DE NOTIFICACIONES ================
class NotificationSystem:
    def __init__(self, page):
        self.page = page
    
    def show(self, message, type="info"):
        colors = {
            "info": AppTheme.PRIMARY,
            "success": AppTheme.SUCCESS,
            "warning": AppTheme.WARNING,
            "error": AppTheme.DANGER
        }
        self.page.snack_bar = ft.SnackBar(
            ft.Text(message, color="white"),
            bgcolor=colors[type]
        )
        self.page.snack_bar.open = True
        self.page.update()

# ================ SISTEMA DE FILTROS ================
class FilterSystem:
    def __init__(self):
        self.filters = {
            'text': '',
            'date': None,
            'min_score': 0.0,
            'max_score': 5.0,
            'sort': 'recent'
        }
    
    def apply(self, notes):
        filtered = notes
        if self.filters['text']:
            filtered = [n for n in filtered if self.filters['text'].lower() in n['asignatura'].lower()]
        if self.filters['date']:
            filtered = [n for n in filtered if n['fecha'] == self.filters['date']]
        filtered = [n for n in filtered if self.filters['min_score'] <= float(n['calificacion']) <= self.filters['max_score']]
        
        # Ordenamiento
        if self.filters['sort'] == 'recent':
            return sorted(filtered, key=lambda n: n['timestamp'], reverse=True)
        elif self.filters['sort'] == 'old':
            return sorted(filtered, key=lambda n: n['timestamp'])
        return filtered

# ================ CALENDARIO SIMPLIFICADO ================
def build_calendar(on_date_select):
    current_date = datetime.now()
    selected_date = None
    
    def change_month(delta, e):
        nonlocal current_date
        current_date = datetime(
            current_date.year + (current_date.month + delta - 1) // 12,
            (current_date.month + delta - 1) % 12 + 1,
            1
        )
        calendar_container.content = build_calendar_content()
        calendar_container.update()
    
    def select_date(day, e):
        nonlocal selected_date
        selected_date = day
        date_str = f"{current_date.year}-{current_date.month:02d}-{day:02d}"
        on_date_select(date_str)
    
    def build_calendar_content():
        cal = calendar.Calendar(firstweekday=6)
        month_days = cal.monthdayscalendar(current_date.year, current_date.month)
        
        # Encabezado de días
        weekdays = ["Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb"]
        header = ft.Row(
            [ft.Container(
                width=32,
                content=ft.Text(day, size=12, weight=ft.FontWeight.BOLD, text_align=ft.TextAlign.CENTER)
            ) for day in weekdays],
            alignment=ft.MainAxisAlignment.SPACE_AROUND
        )
        
        # Celdas del calendario
        rows = []
        for week in month_days:
            cells = []
            for day in week:
                if day == 0:
                    cells.append(ft.Container(width=32, height=32))
                else:
                    is_today = (day == date.today().day and 
                               current_date.month == date.today().month and 
                               current_date.year == date.today().year)
                    
                    is_selected = (day == selected_date)
                    
                    cells.append(
                        ft.Container(
                            width=32,
                            height=32,
                            border_radius=16,
                            bgcolor=AppTheme.PRIMARY if is_today else 
                                   ft.Colors.TRANSPARENT,
                            content=ft.Text(
                                str(day),
                                color="white" if is_today else AppTheme.DARK,
                                text_align=ft.TextAlign.CENTER
                            ),
                            alignment=ft.alignment.center,
                            on_click=lambda e, d=day: select_date(d, e)
                        )
                    )
            rows.append(ft.Row(cells, alignment=ft.MainAxisAlignment.SPACE_AROUND))
        
        return ft.Column([
            ft.Row([
                ft.IconButton(
                    icon=ft.Icons.ARROW_BACK,
                    on_click=lambda e: change_month(-1, e),
                    icon_size=16
                ),
                ft.Text(
                    f"{current_date.strftime('%B %Y')}",
                    size=16,
                    weight=ft.FontWeight.BOLD,
                    expand=True,
                    text_align=ft.TextAlign.CENTER
                ),
                ft.IconButton(
                    icon=ft.Icons.ARROW_FORWARD,
                    on_click=lambda e: change_month(1, e),
                    icon_size=16
                ),
            ]),
            header,
            ft.Divider(height=8),
            *rows
        ])
    
    calendar_container = ft.Container(
        width=280,
        padding=16,
        bgcolor=AppTheme.surface_color("#FFFFFF", "#1E293B"),
        border_radius=12,
        shadow=ft.BoxShadow(spread_radius=1, blur_radius=15, color=ft.Colors.BLACK12),
        content=build_calendar_content()
    )
    
    return calendar_container

# ================ PÁGINA DE NOTAS MEJORADA ================
class NotesPage(ft.Control):
    def __init__(self, page: ft.Page, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        self.notifier = NotificationSystem(page)
        self.filter_system = FilterSystem()
        self.csv_link = ""
        self.loading = False
        self.mobile_panel_ref = ft.Ref[ft.Column]()
        self.mobile_panel_visible = False
        self.page.fonts = {
            "Poppins": "https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap"
        }
        
    def _get_control_name(self):
        return "NotesPage"
    
    # ================ OPERACIONES CRUD ================
    def _edit_note(self, note):
        dlg = ft.AlertDialog(
            title=ft.Text(f"Editar nota: {note['asignatura']}", font_family="Poppins"),
            content=ft.Column([
                ft.TextField(
                    label="Asignatura", 
                    value=note['asignatura'],
                    border_radius=12,
                    border_color=AppTheme.PRIMARY
                ),
                ft.TextField(
                    label="Calificación", 
                    value=str(note['calificacion']),
                    border_radius=12,
                    border_color=AppTheme.PRIMARY
                ),
                ft.TextField(
                    label="Fecha", 
                    value=note['fecha'],
                    border_radius=12,
                    border_color=AppTheme.PRIMARY
                ),
            ]),
            actions=[
                ft.TextButton(
                    "Guardar", 
                    style=ft.ButtonStyle(bgcolor=AppTheme.PRIMARY, color="white"),
                    on_click=lambda e: self._save_note(note, dlg)
                ),
                ft.TextButton(
                    "Cancelar", 
                    on_click=lambda e: dlg.close()
                )
            ]
        )
        self.page.dialog = dlg
        dlg.open = True
        self.page.update()

    def _save_note(self, note, dialog):
        # Validación y guardado
        dialog.close()
        self.notifier.show("Nota actualizada!", "success")
        self.update()

    def _delete_note(self, note):
        def confirm_delete(e):
            # Eliminar de la fuente de datos
            dlg_confirm.open = False
            self.page.update()
            self.notifier.show("Nota eliminada.", "success")
            self.update()
        
        dlg_confirm = ft.AlertDialog(
            title=ft.Text("Confirmar eliminación", font_family="Poppins"),
            content=ft.Text(f"¿Eliminar nota de {note['asignatura']}?"),
            actions=[
                ft.TextButton(
                    "Sí", 
                    style=ft.ButtonStyle(color=AppTheme.DANGER),
                    on_click=confirm_delete
                ),
                ft.TextButton(
                    "Cancelar", 
                    on_click=lambda e: dlg_confirm.close()
                )
            ]
        )
        self.page.dialog = dlg_confirm
        dlg_confirm.open = True
        self.page.update()

    # ================ COMPONENTES UI MEJORADOS ================
    def _stat_card(self, title: str, value, color: str, icon_name: str):
        """Tarjeta estadística compacta y moderna"""
        return ft.Container(
            width=110,
            height=110,
            padding=12,
            border_radius=12,
            bgcolor=ft.Colors.with_opacity(0.05, color),
            border=ft.border.all(1, ft.Colors.with_opacity(0.1, color)),
            content=ft.Column(
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                alignment=ft.MainAxisAlignment.CENTER,
                controls=[
                    ft.Container(
                        width=40,
                        height=40,
                        border_radius=20,
                        bgcolor=ft.Colors.with_opacity(0.15, color),
                        content=ft.Icon(
                            icon_name,
                            color=color,
                            size=20
                        )
                    ),
                    ft.Text(
                        str(value),
                        size=22,
                        weight=ft.FontWeight.BOLD,
                        color=color
                    ),
                    ft.Text(
                        title,
                        size=11,
                        color=ft.Colors.with_opacity(0.7, ft.Colors.BLACK),
                        text_align=ft.TextAlign.CENTER
                    )
                ],
                spacing=8
            )
        )
    
    def _filter_chip(self, label: str, selected: bool):
        """Chip de filtro con diseño moderno"""
        return ft.Container(
            padding=ft.padding.symmetric(horizontal=16, vertical=8),
            border_radius=20,
            bgcolor=AppTheme.PRIMARY if selected else 
                   ft.Colors.with_opacity(0.08, AppTheme.PRIMARY),
            animate=ft.Animation(300, "easeOut"),
            on_click=lambda e: self._set_filter('sort', label.lower()),
            content=ft.Text(
                label,
                size=13,
                color="white" if selected else AppTheme.PRIMARY
            )
        )
    
    def _grade_indicator(self, grade: float):
        """Indicador visual de calificación mejorado"""
        return ft.Container(
            width=100,
            content=ft.Stack(
                height=20,
                controls=[
                    # Fondo
                    ft.Container(
                        width=100,
                        height=6,
                        bgcolor=ft.Colors.with_opacity(0.1, AppTheme.DARK),
                        border_radius=3,
                        top=7
                    ),
                    # Barra de progreso
                    ft.Container(
                        width=grade*20,  # 5.0 * 20 = 100
                        height=6,
                        bgcolor=AppTheme.grade_color(grade),
                        border_radius=3,
                        top=7
                    ),
                    # Estrellas
                    ft.Row(
                        controls=[
                            ft.Icon(
                                name=ft.Icons.STAR,
                                size=16,
                                color="#FBBF24" if i < round(grade) else 
                                     ft.Colors.with_opacity(0.3, AppTheme.DARK)
                            ) for i in range(5)
                        ],
                        spacing=2
                    )
                ]
            )
        )
    
    def _note_card(self, note):
        """Tarjeta de nota con diseño moderno"""
        grade = float(note["calificacion"])
        low_score = grade < 3.0
        
        # Creamos el contenedor interno con el evento on_hover
        container = ft.Container(
            padding=16,
            animate=ft.Animation(300, "easeOut"),
            gradient=ft.LinearGradient(
                begin=ft.alignment.top_left,
                end=ft.alignment.bottom_right,
                colors=[
                    ft.Colors.with_opacity(0.03, AppTheme.grade_color(grade)),
                    ft.Colors.with_opacity(0.01, AppTheme.grade_color(grade))
                ]
            ),
            content=ft.Row([
                # Indicador de color
                ft.Container(
                    width=6, height=48,
                    bgcolor=AppTheme.grade_color(grade),
                    border_radius=ft.border_radius.all(8),
                    margin=ft.margin.only(right=16),
                ),
                # Contenido principal
                ft.Column([
                    ft.Text(
                        note["asignatura"], 
                        size=16, 
                        weight=ft.FontWeight.BOLD,
                        font_family="Poppins"
                    ),
                    ft.Text(note["fecha"], size=12, color=ft.Colors.BLACK54),
                ], expand=True),
                # Indicador visual
                self._grade_indicator(grade),
                # Icono de estado
                ft.Icon(
                    ft.Icons.WARNING_ROUNDED if low_score else ft.Icons.CHECK_CIRCLE_ROUNDED,
                    color=AppTheme.DANGER if low_score else AppTheme.SUCCESS,
                    size=22
                ),
                # Acciones
                ft.PopupMenuButton(
                    icon=ft.Icons.MORE_VERT,
                    icon_color=ft.Colors.BLACK54,
                    items=[
                        ft.PopupMenuItem(
                            icon=ft.Icons.EDIT,
                            text="Editar",
                            on_click=lambda e, x=note: self._edit_note(x)
                        ),
                        ft.PopupMenuItem(
                            icon=ft.Icons.DELETE,
                            text="Eliminar",
                            on_click=lambda e, x=note: self._delete_note(x)
                        ),
                    ]
                )
            ], 
            alignment=ft.MainAxisAlignment.CENTER, 
            spacing=12,
            vertical_alignment=ft.CrossAxisAlignment.CENTER
            ),
            # Evento on_hover
            on_hover=lambda e: self._toggle_card_hover(e)
        )
        
        return ft.Card(
            elevation=0,
            margin=ft.margin.symmetric(horizontal=16, vertical=8),
            shape=ft.RoundedRectangleBorder(radius=12),
            content=container
        )
    
    def _toggle_card_hover(self, e):
        """Efecto hover para tarjetas"""
        container = e.control
        card = container.parent
        if e.data == "true":
            card.elevation = 8
            container.bgcolor = ft.Colors.with_opacity(0.02, AppTheme.PRIMARY)
        else:
            card.elevation = 0
            container.bgcolor = None
        card.update()

    def _toggle_mobile_panel(self, e):
        """Alterna la visibilidad del panel móvil"""
        self.mobile_panel_visible = not self.mobile_panel_visible
        if self.mobile_panel_ref.current:
            self.mobile_panel_ref.current.visible = self.mobile_panel_visible
            e.control.icon = ft.Icons.EXPAND_LESS if self.mobile_panel_visible else ft.Icons.EXPAND_MORE
            self.update()

    # ================ VISTAS PRINCIPALES ================
    def build_summary(self):
        """Panel de resumen estadístico compacto"""
        califs = [float(n["calificacion"]) for n in notes_data_all]
        promedio = sum(califs) / len(califs) if califs else 0
        total = len(notes_data_all)
        materias = len(set(n["asignatura"] for n in notes_data_all))
        bajas = sum(1 for n in notes_data_all if float(n["calificacion"]) < 3.0)
        
        return ft.Row(
            scroll=ft.ScrollMode.AUTO,
            controls=[
                self._stat_card("PROMEDIO", f"{promedio:.2f}", AppTheme.SUCCESS, ft.Icons.BAR_CHART),
                self._stat_card("NOTAS", total, AppTheme.PRIMARY, ft.Icons.LIST),
                self._stat_card("MATERIAS", materias, AppTheme.SECONDARY, ft.Icons.SCHOOL),
                self._stat_card("< 3.0", bajas, AppTheme.DANGER, ft.Icons.WARNING),
            ],
            spacing=15,
            alignment=ft.MainAxisAlignment.SPACE_EVENLY
        )

    def build_performance_chart(self):
        """Gráfico de desempeño por asignatura"""
        averages = self.get_average_by_subject()
        if not averages: return ft.Container()
        
        return ft.Card(
            elevation=0,
            margin=0,
            content=ft.Container(
                padding=16,
                border_radius=12,
                border=ft.border.all(1, ft.Colors.with_opacity(0.1, AppTheme.PRIMARY)),
                content=ft.Column([
                    ft.Row([
                        ft.Icon(ft.Icons.TRENDING_UP, color=AppTheme.PRIMARY, size=20),
                        ft.Text("Desempeño por Asignatura", size=14, weight=ft.FontWeight.BOLD)
                    ]),
                    ft.Divider(height=12),
                    ft.Column([
                        ft.Row([
                            ft.Text(
                                subj, 
                                size=12, 
                                width=100, 
                                weight=ft.FontWeight.BOLD,
                                tooltip=subj
                            ),
                            ft.Container(
                                width=avg*40, 
                                height=10, 
                                bgcolor=AppTheme.grade_color(avg), 
                                border_radius=5,
                                animate=ft.Animation(1000, "easeOut")
                            ),
                            ft.Text(f"{avg:.2f}", size=12, width=40, text_align=ft.TextAlign.RIGHT)
                        ], spacing=8) for subj, avg in averages.items()
                    ], spacing=10)
                ])
            )
        )

    # ================ LÓGICA DE DATOS ================
    @lru_cache(maxsize=32)
    def get_average_by_subject(self):
        """Calcula promedios por asignatura con caché"""
        subj_data = {}
        for n in notes_data_all:
            try: 
                g = float(n["calificacion"])
                subj_data.setdefault(n["asignatura"], []).append(g)
            except: 
                continue
        return {subj: sum(grades)/len(grades) for subj, grades in subj_data.items()}

    def load_filtered_notes(self):
        """Filtra notas según el sistema de filtros"""
        return self.filter_system.apply(notes_data_all)

    # ================ MANEJADORES ================
    def _set_filter(self, filter_type, value):
        """Aplica filtro y actualiza UI"""
        if filter_type == 'sort':
            self.filter_system.filters['sort'] = value
        self.update()

    def on_search_change(self, e):
        self.filter_system.filters['text'] = e.control.value.strip()
        self.update()

    def exportar_csv(self, e):
        """Exporta a CSV en segundo plano"""
        self.loading = True
        self.export_button.disabled = True
        self.export_button.text = "Exportando..."
        self.update()
        
        def export_thread():
            try:
                df = pd.DataFrame(notes_data_all)
                ruta = "mis_notas.csv"
                df.to_csv(ruta, index=False)
                time.sleep(1)  # Simular proceso largo
                self.csv_link = f"sandbox:/{ruta}"
                self.notifier.show("CSV generado. Descarga disponible", "success")
            except Exception as e:
                self.notifier.show(f"Error al exportar: {str(e)}", "error")
            finally:
                self.loading = False
                self.export_button.disabled = False
                self.export_button.text = "Exportar a CSV"
                self.update()
        
        threading.Thread(target=export_thread).start()

    # ================ VISTA PRINCIPAL ================
    def build(self):
        # Navbar superior
        navbar = ft.Container(
            bgcolor=AppTheme.surface_color("#FFFFFF", "#1E293B"),
            padding=ft.padding.symmetric(horizontal=20, vertical=12),
            content=ft.Row([
                # Menú de navegación
                build_popup_menu(),
                ft.Text(
                    "Point List", 
                    size=22, 
                    weight=ft.FontWeight.BOLD, 
                    font_family="Poppins",
                    color=AppTheme.DARK
                ),
                ft.Container(expand=True),
                ft.Text(current_user["name"], color=AppTheme.DARK),
                ft.GestureDetector(
                    content=ft.CircleAvatar(
                        foreground_image_src=current_user["photo_url"], 
                        radius=20
                    ),
                    on_tap=lambda e: NavigationController.update_view("Perfil")
                )
            ])
        )

        # Panel superior: estadísticas
        top_panel = ft.Container(
            padding=ft.padding.only(top=10, bottom=15),
            content=ft.Column([
                ft.Text("RESUMEN ACADÉMICO", 
                        size=14, 
                        color=ft.Colors.BLACK54,
                        weight=ft.FontWeight.BOLD),
                self.build_summary()
            ])
        )

        # Filtros
        filter_row = ft.ResponsiveRow(
            columns=12,
            vertical_alignment=ft.CrossAxisAlignment.CENTER,
            controls=[
                ft.Column(
                    col=8,
                    controls=[
                        ft.Row([
                            self._filter_chip("Todos", self.filter_system.filters['sort'] == 'all'),
                            self._filter_chip("Recientes", self.filter_system.filters['sort'] == 'recent'),
                            self._filter_chip("Viejas", self.filter_system.filters['sort'] == 'old'),
                        ], spacing=8)
                    ]
                ),
                ft.Column(
                    col=4,
                    controls=[
                        ft.TextField(
                            hint_text="Buscar asignatura...",
                            prefix_icon=ft.Icons.SEARCH,
                            border_radius=20,
                            filled=True,
                            content_padding=12,
                            on_change=self.on_search_change,
                            expand=True
                        )
                    ]
                )
            ]
        )

        # Lista de notas con paginación
        notes_list = ft.Column(
            expand=True,
            scroll=ft.ScrollMode.AUTO,
            controls=[self._note_card(n) for n in self.load_filtered_notes()[:50]]  # Paginación inicial
        )

        # Panel lateral derecho (contenido)
        self.export_button = ft.ElevatedButton(
            "Exportar a CSV",
            icon=ft.Icons.DOWNLOAD,
            on_click=self.exportar_csv,
            style=ft.ButtonStyle(
                bgcolor=AppTheme.PRIMARY, 
                color="white",
                padding=ft.padding.symmetric(vertical=12)
            )
        )
        
        # Usamos la función build_calendar directamente
        right_panel_content = ft.Column([
            build_calendar(on_date_select=lambda d: self._set_filter('date', d)),
            ft.Divider(height=24),
            self.build_performance_chart(),
            ft.Divider(height=24),
            self.export_button,
            ft.Text("► Descargar mis_notas.csv", size=14, color=AppTheme.PRIMARY, link=self.csv_link)
            if self.csv_link else ft.Container()
        ], spacing=16)

        # Layout principal responsivo
        return ft.Column(
            expand=True,
            scroll=ft.ScrollMode.AUTO,
            controls=[
                navbar,
                top_panel,
                ft.Container(
                    padding=ft.padding.symmetric(horizontal=15),
                    content=filter_row
                ),
                ft.Divider(height=1, thickness=0.5),
                # Versión corregida
                ft.Container(
                    expand=True,
                    content=ft.Row([
                        # Lista de notas
                        ft.Column(
                            expand=True,
                            scroll=ft.ScrollMode.AUTO,
                            controls=[
                                notes_list,
                                ft.ProgressBar(visible=self.loading)
                            ]
                        ),
                        # Panel lateral solo visible en pantallas grandes
                        ft.ResponsiveRow(
                            visible=self.page.width >= 768,
                            controls=[right_panel_content]
                        )
                    ])
                ),
                # Panel móvil colapsable
                ft.Column(
                    visible=self.page.width < 768,
                    controls=[
                        ft.IconButton(
                            icon=ft.Icons.EXPAND_MORE if not self.mobile_panel_visible else ft.Icons.EXPAND_LESS,
                            on_click=self._toggle_mobile_panel
                        ),
                        ft.Column(
                            ref=self.mobile_panel_ref,
                            visible=self.mobile_panel_visible,
                            controls=[right_panel_content]
                        )
                    ]
                )
            ]
        )

    def update(self):
        super().update()



# ================ PÁGINA DE DETALLE DE ASIGNATURA ================
class SubjectDetailPage(BasePage):
    def __init__(self, page: ft.Page, subject: str, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        self.subject = subject
        
    def _get_control_name(self): 
        return "SubjectDetailPage"
    
    def build(self):
        navbar = ft.Container(
            bgcolor=AppTheme.surface_color("#FFFFFF", "#1E293B"),
            padding=ft.padding.symmetric(horizontal=20, vertical=12),
            shadow=ft.BoxShadow(spread_radius=1, blur_radius=10, color=ft.Colors.BLACK12),
            content=ft.Row([
                ft.IconButton(
                    icon=ft.Icons.ARROW_BACK,
                    on_click=lambda e: NavigationController.update_view("Notas")
                ),
                ft.Text(
                    f"Detalle: {self.subject}",
                    size=22,
                    weight=ft.FontWeight.BOLD,
                    font_family="Poppins",
                    expand=True,
                    text_align=ft.TextAlign.CENTER
                ),
                ft.GestureDetector(
                    content=ft.CircleAvatar(
                        foreground_image_src=current_user["photo_url"], 
                        radius=20
                    ),
                    on_tap=lambda e: NavigationController.update_view("Perfil")
                )
            ])
        )
        
        entries = [n for n in notes_data_all if n["asignatura"] == self.subject]
        
        # Gráfico de evolución
        dates = sorted(set(e['fecha'] for e in entries))
        avg_grades = []
        for d in dates:
            day_grades = [float(e['calificacion']) for e in entries if e['fecha'] == d]
            avg_grades.append(sum(day_grades)/len(day_grades) if day_grades else 0)
        
        chart = ft.Container(
            height=200,
            padding=20,
            content=ft.LineChart(
                data_series=[
                    ft.LineChartData(
                        data_points=[
                            ft.LineChartDataPoint(i, grade) for i, grade in enumerate(avg_grades)
                        ],
                        color=AppTheme.PRIMARY,
                        stroke_width=3,
                        curved=True,
                        stroke_cap_round=True
                    )
                ],
                min_y=0,
                max_y=5,
                left_axis=ft.ChartAxis(labels_size=40),
                bottom_axis=ft.ChartAxis(
                    labels=[
                        ft.ChartAxisLabel(
                            i, 
                            ft.Text(d.split('-')[-1]),  # Cierre añadido aquí para ft.Text
                            position=ft.LabelPosition.OUTSIDE
                        ) for i, d in enumerate(dates)
                    ],
                    labels_size=40
                ),
                tooltip_bgcolor=ft.Colors.with_opacity(0.8, ft.Colors.BLACK),
                expand=True
            )
        )
        
        # Tarjetas de notas
        cards = []
        for e in entries:
            grade = float(e['calificacion'])
            cards.append(
                ft.Card(
                    elevation=3,
                    margin=ft.margin.symmetric(vertical=8),
                    child=ft.Container(
                        padding=16,
                        content=ft.Column([
                            ft.Row([
                                ft.Text(f"Calificación: {grade}", size=16, weight=ft.FontWeight.BOLD),
                                ft.Container(
                                    width=24,
                                    height=24,
                                    border_radius=12,
                                    bgcolor=AppTheme.grade_color(grade),
                                )
                            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                            ft.Text(f"Fecha: {e['fecha']}", size=14, color=AppTheme.surface_color("#6B7280", "#9CA3AF")),
                            ft.Text(f"Comentarios: {e.get('comentarios', 'Sin comentarios')}", size=14)
                        ], spacing=8)
                    )
                )
            )
        
        return ft.Column([
            navbar,
            ft.Divider(height=1),
            ft.Container(padding=20, content=chart),
            ft.Divider(height=16),
            ft.Container(padding=ft.padding.symmetric(horizontal=20), content=ft.Column(cards))
        ], expand=True)
    



# -------------------------
# LISTA GLOBAL DE TÉCNICAS
# -------------------------
techniques = [
    {
        "id": 1,
        "titulo": "Técnica Pomodoro",
        "descripcion": "Estudia en bloques de 25 minutos seguidos de 5 minutos de descanso.",
        "categoria": "Recientes",
        "favorita": False,
        "icon_url": "https://cdn-icons-png.flaticon.com/512/4213/4213492.png"
    },
    {
        "id": 2,
        "titulo": "SMART",
        "descripcion": "La técnica SMART es una metodología para establecer objetivos claros y alcanzables.",
        "categoria": "Recientes",
        "favorita": False,
        "icon_url": "https://cdn-icons-png.flaticon.com/512/2524/2524506.png"
    },
    {
        "id": 3,
        "titulo": "Mapas mentales",
        "descripcion": "Esta técnica visual implica crear diagramas que representan conceptos y sus conexiones.",
        "categoria": "Todos",
        "favorita": False,
        "icon_url": "https://cdn-icons-png.flaticon.com/512/2099/2099072.png"
    },
    {
        "id": 4,
        "titulo": "Método SQ3R",
        "descripcion": "Survey–Question–Read–Recite–Review: un método de lectura para mejorar retención.",
        "categoria": "Todos",
        "favorita": False,
        "icon_url": "https://cdn-icons-png.flaticon.com/512/3565/3565517.png"
    },
]


class EnhancedUserProfilePage(BasePage):
    def __init__(self, page: ft.Page, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        
        # Elementos UI
        self.full_name_field = ft.TextField(
            label="Nombre completo", 
            value=current_user["name"], 
            expand=True
        )
        self.photo_field = ft.TextField(
        label="URL de la foto", 
        value=current_user["photo_url"], 
        expand=True,
        on_change=self._preview_photo,
        suffix=ft.IconButton(
            icon=ft.icons.CLEAR,
            tooltip="Limpiar campo",
            on_click=lambda e: (
                setattr(self.photo_field, 'value', ''), 
                self._preview_photo(e)
            )
        ),
        helper_text="Ej: https://ejemplo.com/foto.jpg",
        keyboard_type=ft.KeyboardType.URL
    )

        self.dark_mode_switch = ft.Switch(
            label="Modo oscuro",
            value=(self.page.theme_mode == ft.ThemeMode.DARK),
            on_change=self._toggle_dark_mode
        )
        self.avatar = ft.CircleAvatar(
            foreground_image_src=current_user["photo_url"], 
            radius=60
        )
        self.snack_bar = ft.SnackBar(ft.Text(""), open=False)
        
        # Nuevos campos de información
        self.email_field = ft.TextField(
            label="Correo electrónico",
            value=current_user.get("email", ""),
            read_only=True
        )
        self.phone_field = ft.TextField(
            label="Teléfono",
            value=current_user.get("phone", ""),
            expand=True
        )
        self.bio_field = ft.TextField(
            label="Biografía",
            value=current_user.get("bio", ""),
            multiline=True,
            min_lines=3,
            max_lines=5,
            expand=True
        )
        self.location_field = ft.TextField(
            label="Ubicación",
            value=current_user.get("location", ""),
            expand=True
        )
        self.website_field = ft.TextField(
            label="Sitio web",
            value=current_user.get("website", ""),
            expand=True
        )
        self.joined_date = ft.Text(
            f"Miembro desde: {current_user.get('joined_date', datetime.now().strftime('%d/%m/%Y'))}",
            size=12,
            color=ft.Colors.GREY_600
        )
        
        # Estadísticas de usuario
        self.stats_row = ft.Row([
            ft.Column([
                ft.Text("Posts", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE_700),
                ft.Text(
                    str(current_user.get("post_count", 0)), 
                    size=18,
                    weight=ft.FontWeight.W_500
                )
            ], horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=4),
            
            ft.VerticalDivider(width=1, height=30, color=ft.Colors.GREY_400),
            
            ft.Column([
                ft.Text("Seguidores", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE_700),
                ft.Text(
                    str(current_user.get("followers", 0)), 
                    size=18,
                    weight=ft.FontWeight.W_500
                )
            ], horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=4),
            
            ft.VerticalDivider(width=1, height=30, color=ft.Colors.GREY_400),
            
            ft.Column([
                ft.Text("Siguiendo", size=16, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE_700),
                ft.Text(
                    str(current_user.get("following", 0)), 
                    size=18,
                    weight=ft.FontWeight.W_500
                )
            ], horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=4)
        ], 
        spacing=30, 
        alignment=ft.MainAxisAlignment.CENTER,
        vertical_alignment=ft.CrossAxisAlignment.CENTER)

    def _preview_photo(self, e):
        """Actualiza la previsualización del avatar"""
        self.avatar.foreground_image_src = self.photo_field.value
        self.page.update()

    def _toggle_dark_mode(self, e):
        """Cambia entre modo claro/oscuro"""
        new_theme = ft.ThemeMode.DARK if e.control.value else ft.ThemeMode.LIGHT
        self.page.theme_mode = new_theme
        self.page.client_storage.set("theme_mode", "dark" if e.control.value else "light")
        self.page.update()

    def _save_profile(self, e):
        """Valida y guarda los cambios del perfil"""
        # Validación de nombre
        if not self.full_name_field.value.strip():
            self._show_snackbar("Nombre requerido", is_error=True)
            return
            
        # Validación de URL
        if self.photo_field.value and not validators.url(self.photo_field.value):
            self._show_snackbar("URL inválida", is_error=True)
            return
            
        # Actualizar datos del usuario
        current_user["name"] = self.full_name_field.value
        current_user["photo_url"] = self.photo_field.value
        current_user["phone"] = self.phone_field.value
        current_user["bio"] = self.bio_field.value
        current_user["location"] = self.location_field.value
        current_user["website"] = self.website_field.value
        
        # Confirmación y feedback
        self._show_snackbar("Perfil actualizado ✅", is_success=True)
        self.page.update()

    def _show_snackbar(self, message, is_error=False, is_success=False):
        """Muestra notificaciones toast"""
        self.snack_bar.content = ft.Text(message)
        self.snack_bar.bgcolor = (
            ft.Colors.RED_300 if is_error else 
            ft.Colors.GREEN_400 if is_success else 
            ft.Colors.BLUE_200
        )
        self.snack_bar.open = True
        self.page.snack_bar = self.snack_bar
        self.page.update()

    def build(self):
        # Barra de navegación mejorada
        navbar = ft.AppBar(
            leading=ft.IconButton(
                ft.Icons.ARROW_BACK,
                on_click=lambda e: NavigationController.update_view("Inicio")
            ),
            title=ft.Text("Mi Perfil"),
            bgcolor=ft.Colors.SURFACE_VARIANT,
            actions=[
                ft.IconButton(ft.Icons.SETTINGS, on_click=lambda e: print("Configuración")),
                ft.IconButton(ft.Icons.NOTIFICATIONS, on_click=lambda e: print("Notificaciones"))
            ]
        )

        # Contenido principal expandido
        content = ft.Container(
            padding=20,
            content=ft.Row([  # Diseño en dos columnas
                # Columna izquierda: Información básica
                ft.Container(
                    width=300,
                    content=ft.Column([
                        # Avatar grande
                        ft.Container(
                            content=self.avatar,
                            alignment=ft.alignment.center,
                            padding=10
                        ),
                        
                        # Información básica
                        ft.Text(current_user["name"], 
                               size=24, 
                               weight=ft.FontWeight.BOLD,
                               text_align=ft.TextAlign.CENTER),
                        
                        self.email_field,
                        self.joined_date,
                        
                        # Estadísticas
                        ft.Container(
                            content=self.stats_row,
                            margin=ft.margin.only(top=20),
                            padding=10,
                            bgcolor=ft.Colors.GREY_100,
                            border_radius=10
                        ),
                        
                        # Preferencias
                        ft.Card(
                            content=ft.Container(
                                padding=10,
                                content=ft.Column([
                                    ft.Text("Preferencias", size=16, weight=ft.FontWeight.BOLD),
                                    ft.ListTile(
                                        leading=ft.Icon(ft.Icons.BRIGHTNESS_4),
                                        title=ft.Text("Modo oscuro"),
                                        trailing=self.dark_mode_switch,
                                    )
                                ])
                            )
                        )
                    ], spacing=20)
                ),
                
                # Separador vertical
                ft.VerticalDivider(width=1),
                
                # Columna derecha: Formulario de edición
                ft.Container(
                    expand=True,
                    padding=ft.padding.only(left=20),
                    content=ft.Column([
                        ft.Text("Editar Perfil", size=20, weight=ft.FontWeight.BOLD),
                        ft.Divider(height=20),
                        
                        # Sección de información personal
                        ft.Text("Información Personal", size=16, weight=ft.FontWeight.BOLD),
                        ft.Row([
                            self.full_name_field,
                            self.phone_field
                        ], spacing=20),
                        self.location_field,
                        self.bio_field,
                        
                        # Sección de enlaces
                        ft.Text("Enlaces", size=16, weight=ft.FontWeight.BOLD, margin=ft.margin.only(top=20)),
                        self.photo_field,
                        self.website_field,
                        
                        # Previsualización de foto
                        ft.Container(
                            content=ft.Column([
                                ft.Text("Previsualización:", size=14, color=ft.Colors.GREY_600),
                                ft.Container(
                                    content=ft.CircleAvatar(
                                        foreground_image_src=self.photo_field.value, 
                                        radius=40
                                    ),
                                    padding=10
                                )
                            ]),
                            visible=bool(self.photo_field.value),
                            margin=ft.margin.only(top=10)
                        ),
                        
                        # Acciones
                        ft.Row([
                            ft.OutlinedButton(
                                "Cancelar", 
                                on_click=lambda e: NavigationController.back(),
                                icon=ft.Icons.CANCEL
                            ),
                            ft.FilledButton(
                                "Guardar", 
                                on_click=self._save_profile, 
                                icon=ft.Icons.SAVE
                            )
                        ], alignment=ft.MainAxisAlignment.END, spacing=10, margin=ft.margin.only(top=20))
                    ])
                )
            ])
        )

        return ft.Column([
            navbar,
            ft.Container(
                expand=True,
                content=ft.ListView(
                    [content],
                    padding=20,
                    auto_scroll=True
                )
            )
        ])










class StudyMethodsPage(BasePage):
    def __init__(self, page: ft.Page, techniques_list: list[dict], **kwargs):
        super().__init__(**kwargs)
        self.page = page
        self.techniques = techniques_list
        self.search_query = ""

    def toggle_fav(self, tech_id: int):
        """
        Invierte el estado 'favorita' de la técnica con id = tech_id
        y reconstruye la vista de Métodos de Estudio.
        """
        for t in self.techniques:
            if t["id"] == tech_id:
                t["favorita"] = not t["favorita"]
                break
        NavigationController.update_view("Metodos")

    def on_search(self, e):
        self.search_query = e.control.value.strip().lower()
        NavigationController.update_view("Metodos")

    def build(self):
        # ————— 1) BANNER CON IMAGEN DE FONDO Y OVERLAY —————
        banner = ft.Container(
            width=self.page.width or 800,
            height=180,
            clip_behavior=ft.ClipBehavior.ANTI_ALIAS,
            border_radius=ft.border_radius.all(12),
            content=ft.Stack(
                controls=[
                    # Imagen de fondo
                    ft.Image(
                        src="banner_metodos.jpg",  # Debe estar en assets/
                        fit=ft.ImageFit.COVER,
                        width=self.page.width or 800,
                        height=180,
                    ),
                    # Overlay semitransparente
                    ft.Container(
                        expand=True,
                        bgcolor=ft.Colors.with_opacity(0.3, ft.Colors.BLACK),
                    ),
                    # Texto centrado
                    ft.Container(
                        alignment=ft.alignment.center,
                        content=ft.Text(
                            "Aprende mejor,\nestudia más fácil",
                            size=32,
                            weight=ft.FontWeight.BOLD,
                            color="white",
                            text_align=ft.TextAlign.CENTER,
                        ),
                    ),
                ]
            ),
        )

        # ————— 2) ENCABEZADO CON MENÚ, TÍTULO “Técnicas de estudio” + BUSCADOR —————
        menu_button = build_popup_menu()  # Aquí insertamos el menú hamburguesa

        title = ft.Text("Técnicas de estudio", size=24, weight=ft.FontWeight.BOLD, color="#2B2B2B")
        search = ft.TextField(
            hint_text="Buscar técnica",
            prefix_icon=ft.Icons.SEARCH,
            width=300,
            on_change=self.on_search,
            border_radius=ft.border_radius.all(20),
            border_color="#D1D5DB",
            bgcolor="#F9FAFB",
            on_focus=lambda e: setattr(e.control, "border_color", "#4A90E2"),
            on_blur=lambda e: setattr(e.control, "border_color", "#D1D5DB"),
        )
        header_bar = ft.Container(
            bgcolor="white",
            padding=ft.padding.symmetric(horizontal=24, vertical=12),
            border_radius=ft.border_radius.all(8),
            shadow=ft.BoxShadow(blur_radius=2, offset=ft.Offset(0, 1), color="#0000000F"),
            margin=ft.margin.only(top=-36, left=30, right=30),  # Sobresale sobre el banner
            content=ft.Row(
                controls=[
                    # 1) Botón de menú a la izquierda
                    menu_button,
                    ft.Container(width=12),
                    # 2) Título
                    title,
                    ft.Container(expand=True),
                    # 3) Campo de búsqueda
                    search
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=16,
            ),
        )

        # ————— 3) TARJETAS DE TÉCNICA CON “hover” Y ANIMATED SWITCHER EN EL CORAZÓN —————
        def make_card(t: dict):
            desc = t["descripcion"]
            if len(desc) > 60:
                desc = desc[:57].rstrip() + "..."

            heart_icon = ft.Icons.FAVORITE if t.get("favorita", False) else ft.Icons.FAVORITE_BORDER
            heart_color = "#EF4444" if t.get("favorita", False) else "#9CA3AF"

            icon_control = (
                ft.Image(src=t["icon_url"], width=36, height=36)
                if t.get("icon_url")
                else ft.Icon(ft.Icons.LIGHTBULB_OUTLINE, size=36, color="#BBBBBB")
            )

            card = ft.Container(
                width=360,
                bgcolor="#FAFAFA",  # Gris muy claro
                border_radius=ft.border_radius.all(12),
                padding=ft.padding.all(18),
                shadow=ft.BoxShadow(blur_radius=6, offset=ft.Offset(0, 3), color="#0000001A"),
                margin=ft.margin.all(10),
                content=ft.Column(
                    controls=[
                        # Icono y título
                        ft.Row(
                            controls=[
                                icon_control,
                                ft.Container(width=14),
                                ft.Text(
                                    t["titulo"],
                                    size=19,
                                    weight=ft.FontWeight.BOLD,
                                    color="#2B2B2B",
                                    expand=True,
                                ),
                            ],
                            alignment=ft.MainAxisAlignment.START,
                        ),
                        ft.Divider(height=10, color="transparent"),
                        # Descripción en cursiva y gris medio
                        ft.Text(
                            desc,
                            size=14,
                            color="#6B7280",
                            italic=True,
                            max_lines=2,
                            overflow=ft.TextOverflow.ELLIPSIS,
                        ),
                        ft.Divider(height=14, color="transparent"),
                        # Corazón para marcar favorito
                        ft.Row(
                            controls=[
                                ft.Container(expand=True),
                                ft.AnimatedSwitcher(
                                    transition=ft.AnimatedSwitcherTransition.FADE,
                                    duration=200,
                                    content=ft.IconButton(
                                        icon=heart_icon,
                                        icon_color=heart_color,
                                        icon_size=26,
                                        padding=ft.padding.all(0),
                                        on_click=lambda e, tid=t["id"]: self.toggle_fav(tid),
                                    ),
                                ),
                            ],
                            alignment=ft.MainAxisAlignment.END,
                        ),
                    ],
                    spacing=6,
                ),
            )

            # Efecto hover en la sombra
            card.mouse_enter = lambda e: setattr(card, "shadow", ft.BoxShadow(blur_radius=12, offset=ft.Offset(0, 5), color="#00000022"))
            card.mouse_leave = lambda e: setattr(card, "shadow", ft.BoxShadow(blur_radius=6, offset=ft.Offset(0, 3), color="#0000001A"))
            return card

        # ————— 4) FILTRAR LAS TÉCNICAS POR CATEGORÍA Y BÚSQUEDA —————
        recientes = [
            t for t in self.techniques
            if t["categoria"] == "Recientes"
            and (not self.search_query or self.search_query in t["titulo"].lower())
        ]
        todos = [
            t for t in self.techniques
            if t["categoria"] == "Todos"
            and (not self.search_query or self.search_query in t["titulo"].lower())
        ]

        recientes_cards = [make_card(t) for t in recientes]
        todos_cards     = [make_card(t) for t in todos]

        recientes_section = ft.Column(
            controls=[
                ft.Text("Recientes", size=20, weight=ft.FontWeight.BOLD, color="#2B2B2B"),
                ft.Row(recientes_cards, spacing=40, alignment=ft.MainAxisAlignment.CENTER),
            ],
            spacing=16,
        )

        todos_section = ft.Column(
            controls=[
                ft.Text("Todos", size=20, weight=ft.FontWeight.BOLD, color="#2B2B2B"),
                ft.Row(todos_cards, spacing=40, alignment=ft.MainAxisAlignment.CENTER),
            ],
            spacing=16,
        )

        # ————— 5) PANEL DERECHO: “Mis favoritos” DETALLADO Y SCROLLABLE —————
        fav_title = ft.Row(
            controls=[
                ft.Icon(ft.Icons.FAVORITE, color="#EF4444", size=24),
                ft.Container(width=8),
                ft.Text(
                    f"Mis favoritos ({len([t for t in self.techniques if t['favorita']])})",
                    size=20,
                    weight=ft.FontWeight.BOLD,
                    color="#2B2B2B",
                    expand=True,
                ),
            ],
            spacing=6,
            alignment=ft.MainAxisAlignment.START,
        )
        fav_divider = ft.Container(
            height=2,
            bgcolor="#EF4444",
            margin=ft.margin.symmetric(horizontal=4, vertical=4),
        )

        favoritos = [t for t in self.techniques if t.get("favorita", False)]
        fav_list_controls = []
        if favoritos:
            for t in favoritos:
                fav_list_controls.append(
                    ft.Card(
                        elevation=1,
                        content=ft.Container(
                            bgcolor="#E6F4EA",
                            border_radius=ft.border_radius.all(8),
                            padding=ft.padding.symmetric(horizontal=12, vertical=6),
                            content=ft.Row(
                                controls=[
                                    ft.Image(src=t["icon_url"], width=20, height=20),
                                    ft.Container(width=6),
                                    ft.Text(t["titulo"], size=15, color="#0F5132"),
                                    ft.Container(expand=True),
                                    ft.IconButton(
                                        icon=ft.Icons.CLOSE,
                                        icon_color="#9B2A2A",
                                        icon_size=18,
                                        padding=ft.padding.all(0),
                                        on_click=lambda e, tid=t["id"]: self.toggle_fav(tid),
                                    ),
                                ],
                                alignment=ft.MainAxisAlignment.CENTER,
                                spacing=6,
                            ),
                        ),
                    )
                )
        else:
            fav_list_controls.append(
                ft.Container(
                    margin=ft.margin.only(top=12),
                    content=ft.Text("— Sin favoritos —", size=16, color="#6B7280", italic=True),
                )
            )

        fav_list = ft.ListView(
            expand=True,
            spacing=8,
            controls=fav_list_controls
        )

        right_panel = ft.Column(
            controls=[fav_title, fav_divider, fav_list],
            spacing=8,
            width=260,  # un poco más ancho para los iconos y texto
        )

        # ————— 6) DISEÑO RESPONSIVO: PANEL DERECHO DEBAJO SI ANCHO < 1024 —————
        if self.page.width and self.page.width < 1024:
            # Apilar en columna para pantallas estrechas
            main_content = ft.Column(
                controls=[
                    recientes_section,
                    ft.Container(height=24),
                    todos_section,
                    ft.Container(height=24),
                    right_panel
                ],
                spacing=24,
                expand=True,
            )
        else:
            # Disposición en fila normal
            left_column = ft.Column(
                controls=[recientes_section, todos_section],
                spacing=24,
                expand=True,
            )
            main_content = ft.Row(
                controls=[left_column, right_panel],
                spacing=48,
                expand=True,
            )

        # ————— 7) COMPONER Y DEVOLVER TODO —————
        return ft.Column(
            controls=[
                banner,
                header_bar,
                ft.Container(height=24),
                main_content,
            ],
            spacing=0,
            expand=True,
        )

    def _set_tab(self, tab):
        self.current_tab = tab
        NavigationController.update_view("Metodos")

    def _on_search(self, e):
        self.search_query = e.control.value
        NavigationController.update_view("Metodos")

    def _toggle_fav(self, title):
        if title in self.favorites:
            self.favorites.remove(title)
        else:
            self.favorites.add(title)
        self.page.update()

    def _open_cronogram_dialog(self, method):
        dlg = ft.AlertDialog(
            title=ft.Text(f"Cronograma: {method['title']}"),
            content=ft.Text("Aquí podrás definir tu plan…"),
            actions=[ft.TextButton("Cerrar", on_click=lambda e: setattr(dlg, "open", False))]
        )
        self.page.dialog = dlg
        dlg.open = True
        self.page.update()

    cronogram_events = [
                {
                    "id": 1,
                    "technique_id": None,
                    "title": "Relajo",
                    "start": datetime(2025, 8, 8, 10, 0),
                    "end": datetime(2025, 8, 8, 11, 0),
                    "completed": False
                },]











class CalendarPage(BasePage):
    def __init__(self, page: ft.Page, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        self.content_container = NavigationController.content_container
        self.hoy = date.today()
        self.current_month_index = self.hoy.month - 1
        self.current_year = self.hoy.year
        
        # Cargar eventos desde almacenamiento
        self.cronogram_events = self._load_calendar_events()
        
        self.selected_day = None
        self.dialog = None
        self.second_dialog = None
        self.view_mode = "month"
        self.search_term = ""
        
        # Inicializar modo oscuro
        self._init_dark_mode()
        
        # Campos para el formulario
        self._init_form_fields()
        self._add_pickers_to_overlay()
        
        # Verificar si necesitamos cambiar el tema
        self.page.on_theme_mode_changed = self._theme_changed

    def _load_calendar_events(self):
        try:
            events_json = self.page.client_storage.get("calendar_events")
            if not events_json:
                return []
            
            events = json.loads(events_json)
            parsed_events = []
            for ev in events:
                ev["start"] = datetime.fromisoformat(ev["start"])
                ev["end"] = datetime.fromisoformat(ev["end"])
                parsed_events.append(ev)
            return parsed_events
        except Exception as e:
            print(f"Error cargando eventos: {str(e)}")
            return []

    def _save_events(self):
        try:
            events_to_save = []
            for ev in self.cronogram_events:
                event_copy = ev.copy()
                event_copy["start"] = ev["start"].isoformat()
                event_copy["end"] = ev["end"].isoformat()
                events_to_save.append(event_copy)
            
            self.page.client_storage.set("calendar_events", json.dumps(events_to_save))
        except Exception as e:
            print(f"Error saving events: {e}")

    def _init_dark_mode(self):
        if self.page.theme_mode == ft.ThemeMode.DARK:
            self.colors = {
                "primary": "#4895ef",
                "secondary": "#3a0ca3",
                "accent": "#4cc9f0",
                "light": "#212121",
                "dark": "#e0e0e0",
                "success": "#4ade80",
                "warning": "#f97316",
                "danger": "#ef4444",
                "gray": "#9ca3af",
                "light_gray": "#374151"
            }
        else:
            self.colors = {
                "primary": "#4361ee",
                "secondary": "#3f37c9",
                "accent": "#4895ef",
                "light": "#f8f9fa",
                "dark": "#212529",
                "success": "#4cc9f0",
                "warning": "#f72585",
                "danger": "#e63946",
                "gray": "#6c757d",
                "light_gray": "#e9ecef"
            }

    def _theme_changed(self, e):
        self._init_dark_mode()
        self._refresh_calendar()

    def _get_event_color(self, event_type: str):
        colors = {
            "Examen": self.colors["danger"],
            "Entrega": self.colors["warning"],
            "General": self.colors["success"]
        }
        return colors.get(event_type, self.colors["primary"])

    def _open_date_picker(self):
        try:
            self.new_event_date.pick_date()
        except:
            try:
                self.new_event_date.open()
            except:
                self.page.dialog = self.new_event_date
                self.new_event_date.open = True
                self.page.update()

    def _open_start_time_picker(self):
        try:
            self.new_event_start_time.pick_time()
        except:
            try:
                self.new_event_start_time.open()
            except:
                self.page.dialog = self.new_event_start_time
                self.new_event_start_time.open = True
                self.page.update()

    def _open_end_time_picker(self):
        try:
            self.new_event_end_time.pick_time()
        except:
            try:
                self.new_event_end_time.open()
            except:
                self.page.dialog = self.new_event_end_time
                self.new_event_end_time.open = True
                self.page.update()

    def _init_form_fields(self):
        self.new_event_date = ft.DatePicker(
            value=self.hoy,
            first_date=date(2020, 1, 1),
            last_date=date(2030, 12, 31),
            on_change=self.update_form_fields
        )
        
        self.new_event_start_time = ft.TimePicker(
            value=dt_time(hour=9, minute=0),
            on_change=self.update_form_fields
        )
        
        self.new_event_end_time = ft.TimePicker(
            value=dt_time(hour=10, minute=0),
            on_change=self.update_form_fields
        )
    
        self.new_event_title = ft.TextField(
            label="Título del evento",
            prefix_icon=ft.Icons.TITLE,
            filled=True,
            border_radius=12,
            height=45
        )
        
        self.new_event_type = ft.Dropdown(
            label="Tipo de evento",
            prefix_icon=ft.Icons.LABEL,
            filled=True,
            border_radius=12,
            value="General",
            options=[
                ft.dropdown.Option("Examen"),
                ft.dropdown.Option("Entrega"),
                ft.dropdown.Option("General")
            ],
            width=140
        )
        
        self.new_event_description = ft.TextField(
            label="Descripción",
            prefix_icon=ft.Icons.DESCRIPTION,
            multiline=True,
            min_lines=1,
            max_lines=3,
            filled=True,
            border_radius=12,
            height=80
        )
        
        self.new_event_reminder = ft.Dropdown(
            label="Recordatorio",
            prefix_icon=ft.Icons.NOTIFICATIONS,
            filled=True,
            border_radius=12,
            value="Ninguno",
            options=[
                ft.dropdown.Option("Ninguno"),
                ft.dropdown.Option("5 minutos antes"),
                ft.dropdown.Option("15 minutos antes"),
                ft.dropdown.Option("1 hora antes"),
                ft.dropdown.Option("1 día antes")
            ],
            width=150
        )
        
        self.search_field = ft.TextField(
            hint_text="Buscar eventos...",
            prefix_icon=ft.Icons.SEARCH,
            filled=True,
            border_radius=20,
            on_change=self.filter_events,
            expand=True
        )
        
        self.new_event_date_field = ft.TextField(
            label="Fecha",
            prefix_icon=ft.Icons.CALENDAR_MONTH,
            read_only=True,
            filled=True,
            height=45,
            value=self.hoy.strftime('%d/%m/%Y')
        )
        
        self.new_event_start_field = ft.TextField(
            label="Hora inicio",
            prefix_icon=ft.Icons.ACCESS_TIME,
            read_only=True,
            filled=True,
            height=45,
            value="09:00"
        )
        
        self.new_event_end_field = ft.TextField(
            label="Hora fin",
            prefix_icon=ft.Icons.ACCESS_TIME,
            read_only=True,
            filled=True,
            height=45,
            value="10:00"
        )

    def update_form_fields(self, e=None):
        if self.new_event_date.value:
            self.new_event_date_field.value = self.new_event_date.value.strftime('%d/%m/%Y')
            self.new_event_date_field.update()
        
        if self.new_event_start_time.value:
            self.new_event_start_field.value = self.new_event_start_time.value.strftime('%H:%M')
            self.new_event_start_field.update()
        
        if self.new_event_end_time.value:
            self.new_event_end_field.value = self.new_event_end_time.value.strftime('%H:%M')
            self.new_event_end_field.update()

    def filter_events(self, e):
        self.search_term = self.search_field.value.strip().lower()
        self._refresh_calendar()

    def _add_pickers_to_overlay(self):
        self.page.overlay.extend([
            self.new_event_date,
            self.new_event_start_time,
            self.new_event_end_time
        ])

    def _go_to_today(self, e):
        self.current_month_index = self.hoy.month - 1
        self.current_year = self.hoy.year
        self._refresh_calendar()

    def _toggle_completed(self, event, new_value):
        event["completed"] = new_value
        self._save_events()
        self._refresh_calendar()

    def _delete_event(self, event_to_delete):
        self.cronogram_events = [
            ev for ev in self.cronogram_events
            if ev["id"] != event_to_delete["id"]
        ]
        self._save_events()
        self._refresh_calendar()

    def _open_day_dialog(self, day: int):
        self.selected_day = day
        eventos_dia = [
            ev for ev in self.cronogram_events
            if ev["start"].date() == date(self.current_year, self.current_month_index + 1, day)
        ]

        event_controls = []
        if eventos_dia:
            for ev in eventos_dia:
                hora_str = ev["start"].strftime("%H:%M")
                
                event_card = ft.Card(
                    elevation=0,
                    margin=ft.margin.only(bottom=8),
                    content=ft.Container(
                        padding=10,
                        border=ft.border.only(left=ft.border.BorderSide(
                            3, self._get_event_color(ev["type"]))
                        ),
                        content=ft.Row(
                            controls=[
                                ft.Checkbox(
                                    value=ev.get("completed", False),
                                    on_change=lambda e, ev=ev: self._toggle_completed(ev, e.control.value),
                                ),
                                ft.Column([
                                    ft.Text(
                                        f"{hora_str} - {ev['title']}",
                                        weight=ft.FontWeight.BOLD,
                                        max_lines=1,
                                        overflow="ellipsis"
                                    ),
                                    ft.Text(
                                        ev.get("description", "")[:50] + "..." if ev.get("description") else "",
                                        size=12,
                                        color=self.colors["gray"],
                                        max_lines=1
                                    )
                                ], expand=True)
                            ]
                        )
                    )
                )
                event_controls.append(event_card)
        else:
            event_controls.append(
                ft.Text("No hay eventos para este día.", italic=True, color=self.colors["gray"])
            )

        btn_nuevo = ft.FilledButton(
            text="Añadir nuevo evento",
            icon=ft.Icons.ADD,
            on_click=self._open_add_in_day_dialog
        )

        self.dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text(
                f"Eventos del {day} de {self._get_month_name()}",
                weight=ft.FontWeight.BOLD,
                size=18
            ),
            content=ft.Column(
                controls=event_controls + [
                    ft.Divider(height=20),
                    btn_nuevo
                ],
                spacing=12,
                height=300,
                scroll=ft.ScrollMode.ADAPTIVE
            ),
            actions=[
                ft.TextButton(
                    "Cerrar", 
                    on_click=self._close_dialog,
                    style=ft.ButtonStyle(color=self.colors["primary"])
                )
            ]
        )
        
        self.page.dialog = self.dialog
        self.dialog.open = True
        self.page.update()

    def _open_add_in_day_dialog(self, e=None):
        dia = self.selected_day
        fecha_preset = date(self.current_year, self.current_month_index + 1, dia)
        self.new_event_date.value = fecha_preset
        self.update_form_fields()

        # MEJORADO: Formulario con mejor distribución y espaciado
        form_fields = ft.Column(
            controls=[
                # Título - más destacado
                ft.Container(
                    content=ft.Text("Detalles del Evento", size=16, weight=ft.FontWeight.BOLD),
                    padding=ft.padding.only(bottom=10)
                ),
                
                # Campo de título con más espacio
                ft.Container(
                    content=self.new_event_title,
                    padding=ft.padding.only(bottom=15)
                ),
                
                # Sección de fecha y hora con mejor distribución
                ft.Container(
                    content=ft.Column([
                        ft.Text("Fecha y Hora", size=14, weight=ft.FontWeight.BOLD, color=self.colors["primary"]),
                        ft.Divider(height=5),
                        ft.ResponsiveRow([
                            # Fecha
                            ft.Column(
                                col=4,
                                controls=[
                                    ft.Text("Fecha:", size=12, color=self.colors["gray"]),
                                    ft.Row([
                                        ft.IconButton(
                                            icon=ft.Icons.CALENDAR_MONTH,
                                            on_click=lambda _: self._open_date_picker(),
                                            icon_size=20,
                                            tooltip="Seleccionar fecha"
                                        ),
                                        ft.Text(
                                            self.new_event_date_field.value,
                                            size=14,
                                            weight=ft.FontWeight.BOLD
                                        )
                                    ])
                                ]
                            ),
                            
                            # Hora de inicio
                            ft.Column(
                                col=4,
                                controls=[
                                    ft.Text("Inicio:", size=12, color=self.colors["gray"]),
                                    ft.Row([
                                        ft.IconButton(
                                            icon=ft.Icons.ACCESS_TIME,
                                            on_click=lambda _: self._open_start_time_picker(),
                                            icon_size=20,
                                            tooltip="Seleccionar hora de inicio"
                                        ),
                                        ft.Text(
                                            self.new_event_start_field.value,
                                            size=14,
                                            weight=ft.FontWeight.BOLD
                                        )
                                    ])
                                ]
                            ),
                            
                            # Hora de fin
                            ft.Column(
                                col=4,
                                controls=[
                                    ft.Text("Fin:", size=12, color=self.colors["gray"]),
                                    ft.Row([
                                        ft.IconButton(
                                            icon=ft.Icons.ACCESS_TIME,
                                            on_click=lambda _: self._open_end_time_picker(),
                                            icon_size=20,
                                            tooltip="Seleccionar hora de fin"
                                        ),
                                        ft.Text(
                                            self.new_event_end_field.value,
                                            size=14,
                                            weight=ft.FontWeight.BOLD
                                        )
                                    ])
                                ]
                            )
                        ])
                    ]),
                    padding=ft.padding.only(bottom=20)
                ),
                
                # Sección de tipo y recordatorio con mejor espaciado
                ft.Container(
                    content=ft.Column([
                        ft.Text("Configuración", size=14, weight=ft.FontWeight.BOLD, color=self.colors["primary"]),
                        ft.Divider(height=5),
                        ft.ResponsiveRow([
                            ft.Column(
                                col=6,
                                controls=[
                                    ft.Text("Tipo de evento:", size=12, color=self.colors["gray"]),
                                    self.new_event_type
                                ]
                            ),
                            ft.Column(
                                col=6,
                                controls=[
                                    ft.Text("Recordatorio:", size=12, color=self.colors["gray"]),
                                    self.new_event_reminder
                                ]
                            )
                        ])
                    ]),
                    padding=ft.padding.only(bottom=20)
                ),
                
                # Descripción con etiqueta clara
                ft.Container(
                    content=ft.Column([
                        ft.Text("Descripción:", size=14, weight=ft.FontWeight.BOLD, color=self.colors["primary"]),
                        self.new_event_description
                    ]),
                    padding=ft.padding.only(bottom=20)
                )
            ],
            spacing=0
        )

        def save_and_close(e):
            titulo = self.new_event_title.value.strip()
            fecha = self.new_event_date.value
            hora_inicio = self.new_event_start_time.value
            hora_fin = self.new_event_end_time.value
            tipo = self.new_event_type.value or "General"
            recordatorio = self.new_event_reminder.value or "Ninguno"
            desc = self.new_event_description.value.strip()

            if titulo and fecha and hora_inicio and hora_fin:
                dt_inicio = datetime.combine(fecha, hora_inicio)
                dt_fin = datetime.combine(fecha, hora_fin)
                
                self.cronogram_events.append({
                    "id": str(uuid.uuid4()),
                    "title": titulo,
                    "start": dt_inicio,
                    "end": dt_fin,
                    "completed": False,
                    "type": tipo,
                    "reminder": recordatorio,
                    "description": desc
                })
                
                self._save_events()
                self._close_second_dialog()
                self._close_dialog()
                self._refresh_calendar()

        self.second_dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text("Añadir nuevo evento", weight=ft.FontWeight.BOLD, size=20),
            content=ft.Container(
                content=form_fields,
                width=450,  # Aumentar el ancho
                height=480   # Aumentar la altura
            ),
            actions=[
                ft.TextButton(
                    "Cancelar", 
                    on_click=self._close_second_dialog,
                    style=ft.ButtonStyle(color=self.colors["gray"])
                ),
                ft.FilledButton(
                    "Guardar", 
                    on_click=save_and_close,
                    style=ft.ButtonStyle(
                        bgcolor=self.colors["primary"],
                        padding=ft.padding.symmetric(horizontal=20, vertical=10)
                    )
                )
            ],
            actions_alignment=ft.MainAxisAlignment.END
        )
        
        self.page.dialog = self.second_dialog
        self.second_dialog.open = True
        self.page.update()

    def _close_dialog(self, e=None):
        if self.dialog:
            self.dialog.open = False
        self.page.update()

    def _close_second_dialog(self, e=None):
        if self.second_dialog:
            self.second_dialog.open = False
        self.page.update()

    def change_month(self, delta):
        self.current_month_index += delta
        if self.current_month_index < 0:
            self.current_month_index = 11
            self.current_year -= 1
        elif self.current_month_index > 11:
            self.current_month_index = 0
            self.current_year += 1
        self._refresh_calendar()

    def _get_month_name(self):
        months = [
            "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
            "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
        ]
        return months[self.current_month_index]

    def _create_week_view(self):
        """Vista semanal básica (placeholder)"""
        return ft.Container(
            content=ft.Column([
                ft.Text("Vista Semanal", size=24, weight=ft.FontWeight.BOLD),
                ft.Text("Esta funcionalidad estará disponible pronto", size=16, color=self.colors["gray"]),
                ft.ProgressRing()
            ], 
            alignment=ft.MainAxisAlignment.CENTER, 
            horizontal_alignment=ft.CrossAxisAlignment.CENTER),
            alignment=ft.alignment.center,
            height=300
        )

    def _create_day_cell(self, day: int):
        if day == 0:
            return ft.Container(
                width=70,
                height=70,
                margin=ft.margin.all(2),
                border_radius=6
            )

        is_today = (
            day == self.hoy.day and
            (self.current_month_index + 1) == self.hoy.month and
            self.current_year == self.hoy.year
        )

        eventos_dia = [
            ev for ev in self.cronogram_events
            if ev["start"].date() == date(self.current_year, self.current_month_index + 1, day)
        ]

        content = [
            ft.Container(
                content=ft.Text(
                    str(day),
                    weight=ft.FontWeight.BOLD,
                    color=self.colors["dark"] if not is_today else ft.Colors.WHITE,
                    size=16
                ),
                alignment=ft.alignment.top_right,
                padding=ft.padding.only(top=8, right=8)
            )
        ]

        if eventos_dia:
            event_dots = []
            for ev in eventos_dia[:3]:
                color = self._get_event_color(ev["type"])
                event_dots.append(
                    ft.Container(
                        width=8,
                        height=8,
                        border_radius=4,
                        bgcolor=color,
                        margin=ft.margin.only(right=1)
                    )
                )
            event_indicator = ft.Row(
                controls=event_dots,
                alignment=ft.MainAxisAlignment.CENTER
            )
            content.append(
                ft.Container(
                    content=event_indicator,
                    alignment=ft.alignment.bottom_center,
                    padding=ft.padding.only(bottom=8)
                )
            )

        cell = ft.Container(
            width=70,
            height=70,
            bgcolor=ft.Colors.WHITE if not is_today else self.colors["primary"],
            border=ft.border.all(1, self.colors["light_gray"]),
            border_radius=8,
            content=ft.Column(content, spacing=0, alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
            on_click=lambda e, d=day: self._open_day_dialog(d),
            animate=ft.Animation(duration=300, curve="easeOut"),
            ink=True,
            tooltip=f"Ver eventos del {day} de {self._get_month_name()}" if eventos_dia else "",
            shadow=ft.BoxShadow(spread_radius=0, blur_radius=5, color=ft.Colors.BLACK12, offset=ft.Offset(0,1)) if not is_today else None
        )

        def on_hover(e):
            cell.bgcolor = self.colors["light"] if e.data == "true" else (
                ft.Colors.WHITE if not is_today else self.colors["primary"]
            )
            cell.update()

        cell.on_hover = on_hover

        return cell
    

    def _refresh_calendar(self):
        main_content = self.build()
        self.content_container.content = main_content
        self.page.update()

    def _create_event_card(self, event):
        border_color = self._get_event_color(event["type"])
        
        return ft.Container(
            width=300,
            padding=12,
            border=ft.border.only(left=ft.border.BorderSide(4, border_color)),
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=5,
                color=ft.Colors.BLACK12,
                offset=ft.Offset(0, 2)
            ),
            content=ft.Column(
                controls=[
                    ft.Row(
                        controls=[
                            ft.Text(
                                event["title"],
                                weight=ft.FontWeight.BOLD,
                                size=16,
                                expand=True
                            ),
                            ft.IconButton(
                                icon=ft.Icons.CHECK_CIRCLE if event.get("completed", False) else ft.Icons.CHECK_CIRCLE_OUTLINE,
                                icon_color=self.colors["success"] if event.get("completed", False) else self.colors["gray"],
                                on_click=lambda e, ev=event: self._toggle_completed(ev, not ev.get("completed", False)),
                                tooltip="Marcar como completado"
                            ),
                            ft.IconButton(
                                icon=ft.Icons.DELETE_OUTLINE,
                                icon_color=self.colors["danger"],
                                on_click=lambda e, ev=event: self._delete_event(ev),
                                tooltip="Eliminar evento"
                            )
                        ]
                    ),
                    ft.Divider(height=10),
                    ft.Row(
                        controls=[
                            ft.Icon(ft.Icons.ACCESS_TIME, size=16, color=self.colors["gray"]),
                            ft.Text(
                                f"{event['start'].strftime('%d/%m/%Y %H:%M')} - {event['end'].strftime('%H:%M')}",
                                size=14,
                                color=self.colors["gray"]
                            )
                        ]
                    ),
                    ft.Row(
                        controls=[
                            ft.Icon(ft.Icons.CATEGORY, size=16, color=self.colors["gray"]),
                            ft.Text(
                                event["type"],
                                size=14,
                                color=self.colors["gray"]
                            ),
                            ft.Container(width=10),
                            ft.Icon(ft.Icons.NOTIFICATIONS_ACTIVE, size=16, color=self.colors["gray"]),
                            ft.Text(
                                event.get("reminder", "Sin recordatorio"),
                                size=14,
                                color=self.colors["gray"]
                            )
                        ]
                    ),
                    ft.Text(
                        event.get("description", "")[:60] + "..." if event.get("description") else "Sin descripción",
                        size=12,
                        color=self.colors["gray"]
                    )
                ],
                spacing=8
            )
        )

    def _create_advanced_stats(self):
        event_types = {}
        for event in self.cronogram_events:
            event_types[event["type"]] = event_types.get(event["type"], 0) + 1
        
        if not event_types:
            return ft.Container(
                content=ft.Text("No hay datos para mostrar", italic=True),
                alignment=ft.alignment.center,
                height=150
            )
        
        type_colors = {
            "Examen": self.colors["warning"],
            "Entrega": self.colors["primary"],
            "General": self.colors["success"]
        }
        
        sections = []
        for tipo, count in event_types.items():
            sections.append(
                ft.PieChartSection(
                    count,
                    title=tipo,
                    title_style=ft.TextStyle(size=12, color=ft.Colors.WHITE),
                    color=type_colors.get(tipo, self.colors["gray"]),
                    radius=50,
                )
            )
        
        return ft.PieChart(
            sections=sections,
            sections_space=0,
            center_space_radius=30,
            height=150
        )

    def set_view_mode(self, mode):
        self.view_mode = mode
        self._refresh_calendar()
    
    def toggle_view_mode(self):
        self.view_mode = "week" if self.view_mode == "month" else "month"
        self._refresh_calendar()

    def build(self):
        if False:
            return ft.Text("Has superado tu límite de uso. Vuelve mañana.",
                           color="red", size=20)

        filtered_events = self.cronogram_events
        if self.search_term:
            filtered_events = [
                ev for ev in self.cronogram_events
                if (self.search_term in ev["title"].lower() or 
                    self.search_term in ev.get("description", "").lower() or
                    self.search_term in ev["type"].lower())
            ]

        navbar = ft.Container(
            height=60,
            bgcolor=self.colors["primary"],
            padding=ft.padding.symmetric(horizontal=20),
            content=ft.Row(
                controls=[
                    build_popup_menu(),
                    
                    ft.Row(
                        controls=[
                            ft.IconButton(
                                icon=ft.Icons.CALENDAR_VIEW_MONTH,
                                tooltip="Vista Mensual",
                                on_click=lambda e: self.set_view_mode("month"),
                                icon_color=ft.Colors.WHITE if self.view_mode == "month" else ft.Colors.WHITE54,
                            ),
                            ft.IconButton(
                                icon=ft.Icons.CALENDAR_VIEW_WEEK,
                                tooltip="Vista Semanal",
                                on_click=lambda e: self.set_view_mode("week"),
                                icon_color=ft.Colors.WHITE if self.view_mode == "week" else ft.Colors.WHITE54,
                            ),
                        ],
                        spacing=5
                    ),
                    
                    ft.Text(
                        "Calendario Académico", 
                        size=20, 
                        weight=ft.FontWeight.BOLD, 
                        color=ft.Colors.WHITE,
                        expand=True
                    ),
                    
                    ft.Container(
                        content=self.search_field,
                        width=250,
                        padding=ft.padding.only(right=20)
                    ),
                    
                    ft.Text(current_user["name"], color=ft.Colors.WHITE),
                    ft.GestureDetector(
                        content=ft.CircleAvatar(
                            foreground_image_src=current_user["photo_url"],
                            radius=18
                        ),
                        on_tap=lambda e: NavigationController.update_view("Perfil")
                    )
                ],
                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                vertical_alignment=ft.CrossAxisAlignment.CENTER
            )
        )

        header = ft.Container(
            padding=20,
            bgcolor=f"{self.colors['primary']}10",
            border_radius=ft.border_radius.only(top_left=10, top_right=10),
            content=ft.Row(
                controls=[
                    ft.IconButton(
                        ft.Icons.ARROW_BACK_IOS,
                        on_click=lambda e: self.change_month(-1) if self.view_mode == "month" else self.change_week(-1),
                        icon_color=self.colors["primary"]
                    ),
                    ft.Column(
                        controls=[
                            ft.Text(
                                f"{self._get_month_name()} {self.current_year}" if self.view_mode == "month" else "Vista Semanal",
                                size=24,
                                weight=ft.FontWeight.BOLD,
                                color=self.colors["dark"]
                            ),
                            ft.Text(
                                "Planifica tus actividades académicas",
                                size=14,
                                color=self.colors["gray"]
                            )
                        ],
                        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                        expand=True
                    ),
                    ft.IconButton(
                        ft.Icons.ARROW_FORWARD_IOS,
                        on_click=lambda e: self.change_month(1) if self.view_mode == "month" else self.change_week(1),
                        icon_color=self.colors["primary"]
                    ),
                    ft.IconButton(
                        ft.Icons.CALENDAR_TODAY,
                        on_click=self._go_to_today,
                        icon_color=self.colors["primary"],
                        tooltip="Ir a hoy"
                    )
                ],
                alignment=ft.MainAxisAlignment.SPACE_BETWEEN
            )
        )

        if self.view_mode == "week":
            main_content = self._create_week_view()
        else:
            day_labels = ft.Row(
                controls=[
                    ft.Container(
                        width=70,
                        content=ft.Text(
                            day,
                            weight=ft.FontWeight.BOLD,
                            color=self.colors["gray"],
                            size=12
                        ),
                        alignment=ft.alignment.center,
                        padding=10
                    )
                    for day in ["Lun", "Mar", "Mié", "Jue", "Vie", "Sáb", "Dom"]
                ],
                alignment=ft.MainAxisAlignment.SPACE_EVENLY
            )

            cal = calendar.Calendar()
            month_days = cal.monthdayscalendar(self.current_year, self.current_month_index + 1)
            
            calendar_grid = ft.Column(
                controls=[
                    ft.Row(
                        controls=[self._create_day_cell(day) for day in week],
                        alignment=ft.MainAxisAlignment.SPACE_EVENLY
                    )
                    for week in month_days
                ],
                spacing=4
            )
            
            main_content = ft.Column(
                controls=[
                    day_labels,
                    calendar_grid
                ]
            )

        ahora = datetime.now()
        futuros = sorted(
            [ev for ev in filtered_events if ev["start"] >= ahora],
            key=lambda ev: ev["start"]
        )[:3]
        
        upcoming_events = ft.Column(
            controls=[
                ft.Text("Próximos eventos", size=18, weight=ft.FontWeight.BOLD),
                ft.Divider(height=10),
                ft.Column(
                    controls=[
                        ft.ListTile(
                            title=ft.Text(ev["title"], weight=ft.FontWeight.BOLD),
                            subtitle=ft.Text(
                                f"{ev['start'].strftime('%d/%m %H:%M')} | {ev['type']}",
                                size=12
                            ),
                            leading=ft.Icon(
                                ft.Icons.EVENT,
                                color=self.colors["primary"]
                            ),
                            on_click=lambda e, ev=ev: self._open_day_dialog(ev["start"].day)
                        )
                        for ev in futuros
                    ] or [ft.Text("No hay eventos próximos", italic=True, color=self.colors["gray"])],
                    spacing=8
                )
            ]
        )

        # MEJORADO: Formulario en la barra lateral con mejor distribución
        add_event_form = ft.Card(
            elevation=8,
            content=ft.Container(
                padding=15,
                border_radius=15,
                content=ft.Column(
                    controls=[
                        ft.Text("Nuevo Evento", weight=ft.FontWeight.BOLD, size=16),
                        ft.Divider(height=10),
                        
                        # Campo de título
                        self.new_event_title,
                        
                        # Sección de fecha
                        ft.Text("Fecha:", size=12, color=self.colors["gray"]),
                        ft.Row([
                            ft.IconButton(
                                icon=ft.Icons.CALENDAR_MONTH,
                                on_click=lambda _: self._open_date_picker(),
                                icon_size=20,
                                tooltip="Seleccionar fecha"
                            ),
                            ft.Text(self.new_event_date_field.value, size=14)
                        ]),
                        
                        # Sección de horas
                        ft.ResponsiveRow([
                            ft.Column(
                                col=6,
                                controls=[
                                    ft.Text("Inicio:", size=12, color=self.colors["gray"]),
                                    ft.Row([
                                        ft.IconButton(
                                            icon=ft.Icons.ACCESS_TIME,
                                            on_click=lambda _: self._open_start_time_picker(),
                                            icon_size=20,
                                            tooltip="Seleccionar hora de inicio"
                                        ),
                                        ft.Text(self.new_event_start_field.value, size=14)
                                    ])
                                ]
                            ),
                            ft.Column(
                                col=6,
                                controls=[
                                    ft.Text("Fin:", size=12, color=self.colors["gray"]),
                                    ft.Row([
                                        ft.IconButton(
                                            icon=ft.Icons.ACCESS_TIME,
                                            on_click=lambda _: self._open_end_time_picker(),
                                            icon_size=20,
                                            tooltip="Seleccionar hora de fin"
                                        ),
                                        ft.Text(self.new_event_end_field.value, size=14)
                                    ])
                                ]
                            )
                        ]),
                        
                        # Sección de configuración
                        ft.ResponsiveRow([
                            ft.Column(
                                col=6,
                                controls=[
                                    ft.Text("Tipo:", size=12, color=self.colors["gray"]),
                                    self.new_event_type
                                ]
                            ),
                            ft.Column(
                                col=6,
                                controls=[
                                    ft.Text("Recordatorio:", size=12, color=self.colors["gray"]),
                                    self.new_event_reminder
                                ]
                            )
                        ]),
                        
                        # Descripción
                        ft.Text("Descripción:", size=12, color=self.colors["gray"]),
                        self.new_event_description,
                        
                        # Botón de guardar
                        ft.FilledButton(
                            "Guardar Evento",
                            icon=ft.Icons.SAVE,
                            on_click=self._save_new_event,
                            expand=True,
                            height=45
                        )
                    ],
                    spacing=8
                )
            )
        )

        current_month_events = [
            ev for ev in filtered_events
            if ev["start"].month == self.current_month_index + 1 and
            ev["start"].year == self.current_year
        ]
        
        events_section = ft.Column(
            controls=[
                ft.Text("Eventos" + (f" ({len(current_month_events)})" if current_month_events else ""), 
                         size=18, weight=ft.FontWeight.BOLD),
                ft.Divider(height=10),
                ft.Row(
                    controls=[self._create_event_card(ev) for ev in current_month_events],
                    wrap=True,
                    spacing=20,
                    run_spacing=20,
                    scroll=ft.ScrollMode.ALWAYS,
                    height=400
                ) if current_month_events else ft.Container(
                    content=ft.Column(
                        controls=[
                            ft.Icon(ft.Icons.EVENT_BUSY, size=50, color=self.colors["gray"]),
                            ft.Text("No hay eventos este mes", size=16, color=self.colors["gray"])
                        ],
                        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                        spacing=20
                    ),
                    alignment=ft.alignment.center,
                    height=200
                )
            ]
        )

        stats = ft.Card(
            content=ft.Container(
                padding=20,
                content=ft.Column(
                    controls=[
                        ft.Text("Estadísticas", size=16, weight=ft.FontWeight.BOLD),
                        ft.Divider(height=20),
                        self._create_advanced_stats(),
                        ft.Divider(height=20),
                        ft.Row(
                            controls=[
                                ft.Column(
                                    controls=[
                                        ft.Text(
                                            str(len(current_month_events)),
                                            size=32,
                                            weight=ft.FontWeight.BOLD,
                                            color=self.colors["primary"]
                                        ),
                                        ft.Text("Eventos", size=14)
                                    ],
                                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                                    expand=True
                                ),
                                ft.VerticalDivider(width=20),
                                ft.Column(
                                    controls=[
                                        ft.Text(
                                            str(sum(1 for ev in current_month_events if ev.get("completed", False))),
                                            size=32,
                                            weight=ft.FontWeight.BOLD,
                                            color=self.colors["success"]
                                        ),
                                        ft.Text("Completados", size=14)
                                    ],
                                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                                    expand=True
                                )
                            ]
                        )
                    ]
                )
            )
        )

        return ft.Column(
            controls=[
                navbar,
                ft.Container(height=20),
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(
                            col={"sm": 12, "md": 8},
                            controls=[
                                ft.Card(
                                    content=ft.Container(
                                        padding=20,
                                        content=ft.Column(
                                            controls=[
                                                header,
                                                main_content
                                            ],
                                            spacing=0
                                        )
                                    )
                                ),
                                ft.Container(height=20),
                                events_section
                            ]
                        ),
                        
                        ft.Column(
                            col={"sm": 12, "md": 4},
                            controls=[
                                add_event_form,
                                ft.Container(height=20),
                                ft.Card(
                                    content=ft.Container(
                                        padding=20,
                                        content=upcoming_events
                                    )
                                ),
                                ft.Container(height=20),
                                stats
                            ]
                        )
                    ],
                    spacing=20
                )
            ],
            scroll=ft.ScrollMode.ADAPTIVE,
            expand=True
        )

    def toggle_view_mode(self):
        self.view_mode = "week" if self.view_mode == "month" else "month"
        self._refresh_calendar()

    def change_week(self, delta):
        self.hoy += timedelta(weeks=delta)
        self._refresh_calendar()

    def toggle_theme(self):
        self.page.theme_mode = (
            ft.ThemeMode.DARK 
            if self.page.theme_mode == ft.ThemeMode.LIGHT 
            else ft.ThemeMode.LIGHT
        )
        self._init_dark_mode()
        self.page.update()

    def _save_new_event(self, e):
        titulo = self.new_event_title.value.strip()
        fecha = self.new_event_date.value
        hora_inicio = self.new_event_start_time.value
        hora_fin = self.new_event_end_time.value
        tipo = self.new_event_type.value or "General"
        recordatorio = self.new_event_reminder.value or "Ninguno"
        desc = self.new_event_description.value.strip()

        if not titulo:
            self.page.snack_bar = ft.SnackBar(
                ft.Text("Debes ingresar un título para el evento"),
                bgcolor=self.colors["danger"]
            )
            self.page.snack_bar.open = True
            self._refresh_calendar()
            return

        if not fecha:
            self.page.snack_bar = ft.SnackBar(
                ft.Text("Debes seleccionar una fecha"),
                bgcolor=self.colors["danger"]
            )
            self.page.snack_bar.open = True
            self._refresh_calendar()
            return

        dt_inicio = datetime.combine(fecha, hora_inicio)
        dt_fin = datetime.combine(fecha, hora_fin)
        
        self.cronogram_events.append({
            "id": str(uuid.uuid4()),
            "title": titulo,
            "start": dt_inicio,
            "end": dt_fin,
            "completed": False,
            "type": tipo,
            "reminder": recordatorio,
            "description": desc
        })
        
        self._save_events()
        
        self.new_event_title.value = ""
        self.new_event_description.value = ""
        self.update_form_fields()
        
        self.page.snack_bar = ft.SnackBar(
            ft.Text("Evento añadido correctamente"),
            bgcolor=self.colors["success"]
        )
        self.page.snack_bar.open = True
        self._refresh_calendar()







        




# Archivo para almacenar asignaciones
ASSIGNMENTS_CSV = "assignments.csv"
UPLOADS_DIR = "uploads"

# Inicialización de archivos
os.makedirs(UPLOADS_DIR, exist_ok=True)
if not os.path.exists(ASSIGNMENTS_CSV):
    with open(ASSIGNMENTS_CSV, "w", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["id", "subject", "title", "start", "end", "status", "resources"])
        writer.writeheader()

class AssignmentSystem:
    @staticmethod
    def save_assignment(assignment: dict):
        assignment.setdefault("id", str(uuid.uuid4()))
        assignment["resources"] = ";".join(assignment.get("resources", []))
        
        with open(ASSIGNMENTS_CSV, "a", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=["id", "subject", "title", "start", "end", "status", "resources"])
            writer.writerow(assignment)
    
    @staticmethod
    def get_assignments(subject: str = None):
        assignments = []
        with open(ASSIGNMENTS_CSV, "r", newline="") as f:
            reader = csv.DictReader(f)
            for row in reader:
                if subject and row["subject"] != subject:
                    continue
                row["resources"] = row["resources"].split(";") if row["resources"] else []
                assignments.append(row)
        return assignments
    
    @staticmethod
    def update_assignment(assignment_id: str, updates: dict):
        all_assignments = []
        updated = False
        
        with open(ASSIGNMENTS_CSV, "r", newline="") as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row["id"] == assignment_id:
                    # Actualizar solo si hay cambios en recursos
                    if "resources" in updates:
                        # Convertir a string si es necesario
                        if isinstance(updates["resources"], list):
                            updates["resources"] = ";".join(updates["resources"])
                    row.update(updates)
                    updated = True
                
                # Mantener como string durante el procesamiento
                all_assignments.append(row)
        
        if updated:
            with open(ASSIGNMENTS_CSV, "w", newline="") as f:
                writer = csv.DictWriter(f, fieldnames=["id", "subject", "title", "start", "end", "status", "resources"])
                writer.writeheader()
                for assignment in all_assignments:
                    writer.writerow(assignment)
        
        return updated
    
    @staticmethod
    def delete_assignment(assignment_id: str):
        all_assignments = []
        deleted = False
        
        with open(ASSIGNMENTS_CSV, "r", newline="") as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row["id"] == assignment_id:
                    deleted = True
                    continue
                all_assignments.append(row)
        
        if deleted:
            with open(ASSIGNMENTS_CSV, "w", newline="") as f:
                writer = csv.DictWriter(f, fieldnames=["id", "subject", "title", "start", "end", "status", "resources"])
                writer.writeheader()
                for assignment in all_assignments:
                    assignment["resources"] = ";".join(assignment.get("resources", []))
                    writer.writerow(assignment)
        
        return deleted

class ClassesPage(BasePage):
    def __init__(self, page: ft.Page, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        self.selected_subject = "Multimedia"
        self.file_picker = ft.FilePicker(on_result=self.on_file_picker_result)
        self.page.overlay.append(self.file_picker)
        self.subjects = ["Multimedia", "Matemáticas", "Historia", "Inglés"]
        self.assignments = []
        self._load_assignments()

    def _load_assignments(self):
        # Cargar datos iniciales si no hay asignaciones
        if not AssignmentSystem.get_assignments():
            initial_assignments = [
                {"subject": "Multimedia", "title": "Producto Multimedia", "start": "20 abr", "end": "28 abr", "status": "pending"},
                {"subject": "Multimedia", "title": "Boceto storyboard", "start": "22 abr", "end": "29 abr", "status": "pending"},
                {"subject": "Matemáticas", "title": "Ejercicios Álgebra", "start": "15 may", "end": "22 may", "status": "done"}
            ]
            for assignment in initial_assignments:
                AssignmentSystem.save_assignment(assignment)
        
        self.assignments = AssignmentSystem.get_assignments(self.selected_subject)

    def on_file_picker_result(self, e: ft.FilePickerResultEvent):
        if not e.files:
            return
        
        uploads = []
        for f in e.files:
            # Guardar archivo en carpeta de uploads
            file_path = os.path.join(UPLOADS_DIR, f.name)
            with open(file_path, "wb") as dest:
                with open(f.path, "rb") as src:
                    dest.write(src.read())
            uploads.append(f.name)
        
        self.page.snack_bar = ft.SnackBar(
            ft.Text(f"Recursos subidos: {', '.join(uploads)}"), 
            open=True
        )
        self.page.update()

    def _select_subject(self, subj: str):
        self.selected_subject = subj
        self._load_assignments()
        self.page.update()

    def build(self):
        navbar = ft.Container(
            bgcolor="white",
            padding=ft.padding.symmetric(horizontal=24, vertical=8),
            shadow=ft.BoxShadow(blur_radius=2, offset=ft.Offset(0,1), color="#00000010"),
            content=ft.Row([
                build_popup_menu(),
                ft.Text("Point List", size=20, weight=ft.FontWeight.BOLD),
                ft.Container(expand=True),
                 ft.Text(current_user["name"], color="#2B2B2B"),
    # avatar clicable:
                ft.GestureDetector(
                content=ft.CircleAvatar(foreground_image_src=current_user["photo_url"], radius=16),
                on_tap=lambda e: NavigationController.update_view("Perfil")
                )
            ], alignment=ft.MainAxisAlignment.CENTER, spacing=16)
        )

        banner = ft.Container(
            bgcolor="#EFF6FF",
            padding=ft.padding.symmetric(horizontal=24, vertical=16),
            content=ft.Text(
                f"Clases / {self.selected_subject}",
                size=22, weight=ft.FontWeight.BOLD, color="#1E3A8A"
            )
        )
        # Panel lateral de materias
        sidebar = ft.Container(
            width=200,
            bgcolor="white",
            border_radius=ft.border_radius.all(12),
            shadow=ft.BoxShadow(blur_radius=4, offset=ft.Offset(0,2), color="#00000010"),
            padding=ft.padding.all(16),
            content=ft.Column([
                ft.Text("Materias", size=18, weight=ft.FontWeight.BOLD),
                ft.Divider(height=12),
                *[
                    ft.ListTile(
                        leading=ft.Icon(ft.Icons.LIGHTBULB, color="#3B82F6"),
                        title=ft.Text(
                            subj,
                            size=14,
                            weight=ft.FontWeight.BOLD if subj==self.selected_subject else ft.FontWeight.NORMAL,
                            color="#1E3A8A" if subj==self.selected_subject else "#374151"
                        ),
                        on_click=lambda e, s=subj: self._select_subject(s),
                        hover_color="#F0F8FF"
                    ) for subj in self.subjects
                ],
                ft.Divider(height=20),
                ft.ElevatedButton(
                    "Nueva Materia",
                    icon=ft.Icons.ADD,
                    on_click=self._add_new_subject,
                    bgcolor="#E0F2FE",
                    color="#0EA5E9"
                )
            ], spacing=8)
        )

        # Tarjeta de profesor con estadísticas
        teacher_card = ft.Card(
            elevation=4,
            content=ft.Container(
                padding=ft.padding.all(16),
                content=ft.Column([
                    ft.Row([
                        ft.Text(f"Profesor: Jim Santos", size=18, weight=ft.FontWeight.BOLD),
                        ft.Container(expand=True),
                        # SOLUCIÓN: Container en lugar de Badge
                        ft.Container(
                            content=ft.Text("En línea", size=12, color="white"),
                            bgcolor="#10B981",
                            padding=ft.padding.symmetric(horizontal=10, vertical=4),
                            border_radius=20
                        )
                    ]),
                    ft.Text(f"Todo lo relacionado con {self.selected_subject}.", size=14, color="#4B5563"),
                    ft.Divider(height=16),
                    
                    # Estadísticas de la materia
                    ft.Row([
                        ft.Column([
                            ft.Text("Asignaciones", size=12, color="#6B7280"),
                            ft.Text(str(len(self.assignments)), size=18, weight=ft.FontWeight.BOLD)
                        ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                        ft.VerticalDivider(width=20),
                        ft.Column([
                            ft.Text("Pendientes", size=12, color="#6B7280"),
                            ft.Text(str(sum(1 for a in self.assignments if a["status"] == "pending")), 
                                    size=18, 
                                    weight=ft.FontWeight.BOLD,
                                    color="#F59E0B")
                        ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                        ft.VerticalDivider(width=20),
                        ft.Column([
                            ft.Text("Completadas", size=12, color="#6B7280"),
                            ft.Text(str(sum(1 for a in self.assignments if a["status"] == "done")), 
                                    size=18, 
                                    weight=ft.FontWeight.BOLD,
                                    color="#10B981")
                        ], horizontal_alignment=ft.CrossAxisAlignment.CENTER)
                    ], alignment=ft.MainAxisAlignment.SPACE_AROUND),
                    
                    ft.Divider(height=16),
                    ft.ElevatedButton(
                        "Subir recurso general",
                        icon=ft.Icons.UPLOAD_FILE,
                        bgcolor="#3B82F6", 
                        color="white",
                        on_click=lambda e: self.file_picker.pick_files(allow_multiple=True)
                    )
                ], spacing=12)
            ),
            margin=ft.margin.only(bottom=20)
        )

        # Generar tarjetas de asignaciones
        assignment_cards = []
        for a in self.assignments:
            estado_color = "#10B981" if a["status"] == "done" else "#F59E0B"
            estado_texto = "Completada" if a["status"] == "done" else "Pendiente"
            
            assignment_cards.append(
                ft.Card(
                    elevation=2,
                    content=ft.Container(
                        padding=ft.padding.all(16),
                        content=ft.Row([
                            ft.Column([
                                ft.Text(a["title"], size=16, weight=ft.FontWeight.BOLD),
                                ft.Text(f"{a['start']} → {a['end']}", size=12, color="#4B5563"),
                                ft.Container(
                                    content=ft.Text(estado_texto, size=12, color="white"),
                                    bgcolor=estado_color,
                                    padding=ft.padding.symmetric(horizontal=8, vertical=2),
                                    border_radius=10,
                                    margin=ft.margin.only(top=4)
                                )  # Paréntesis añadido aquí
                            ], expand=True),  # Coma movida dentro del Column
                            ft.ElevatedButton(
                                "Detalles",
                                on_click=lambda e, a=a: NavigationController.update_view("ClassDetail", a),
                                style=ft.ButtonStyle(
                                    shape=ft.RoundedRectangleBorder(radius=20),
                                    bgcolor=ft.Colors.BLUE_50
                                )
                            )
                        ], alignment=ft.MainAxisAlignment.CENTER, spacing=12)
                    ),
                    margin=ft.margin.only(bottom=12)
                )
            )

        # Botón para nueva asignación
        new_assignment_btn = ft.FilledButton(
            "Crear Nueva Asignación",
            icon=ft.Icons.ADD_TASK,
            on_click=self._create_new_assignment,
            style=ft.ButtonStyle(
                padding=ft.padding.symmetric(vertical=16),
                shape=ft.RoundedRectangleBorder(radius=12)
            ),
            bgcolor="#DBEAFE",
            color="#1E40AF"
        )

        # Lista de asignaciones
        assignment_list = ft.Column(
            spacing=12,
            controls=[
                ft.Row([
                    ft.Text("Asignaciones", size=18, weight=ft.FontWeight.BOLD),
                    ft.Container(expand=True),
                    ft.IconButton(
                        icon=ft.Icons.FILTER_LIST,
                        tooltip="Filtrar",
                        on_click=self._show_filters
                    )
                ]),
                *assignment_cards,
                new_assignment_btn
            ]
        )

        # Layout principal
        body = ft.Container(
            padding=ft.padding.symmetric(horizontal=24, vertical=16),
            content=ft.ResponsiveRow(
                columns=12,
                expand=True,
                spacing=24,
                controls=[
                    ft.Column(col=3, controls=[sidebar]),
                    ft.Column(
                        col=9, 
                        controls=[
                            teacher_card,
                            assignment_list
                        ]
                    )
                ]
            )
        )

        return ft.Column([navbar, banner, body], expand=True)
    
    def _add_new_subject(self, e):
        def add_subject(e):
            if subject_input.value:
                self.subjects.append(subject_input.value)
                self.page.snack_bar = ft.SnackBar(
                    ft.Text(f"Materia '{subject_input.value}' añadida"), 
                    open=True
                )
                self.page.update()
                self.page.dialog.open = False
                self.page.update()
        
        subject_input = ft.TextField(label="Nombre de la materia")
        self.page.dialog = ft.AlertDialog(
            title=ft.Text("Añadir nueva materia"),
            content=subject_input,
            actions=[
                ft.TextButton("Cancelar", on_click=lambda e: setattr(self.page.dialog, "open", False)),
                ft.TextButton("Añadir", on_click=add_subject)
            ],
            open=True
        )
        self.page.update()
    
    def _create_new_assignment(self, e):
        # Implementar creación de nueva asignación
        self.page.snack_bar = ft.SnackBar(
            ft.Text("Crear nueva asignación - Implementar esta funcionalidad"), 
            open=True
        )
        self.page.update()
    
    def _show_filters(self, e):
        # Implementar filtros
        pass

class ClassDetailPage(BasePage):
    def __init__(self, page: ft.Page, assignment: dict, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        self.assignment = assignment
        self.file_picker = ft.FilePicker(on_result=self.on_file_picker_result)
        self.page.overlay.append(self.file_picker)
        
        # Cargar recursos si existen
        self.resources = assignment.get("resources", [])
        self.status = assignment.get("status", "pending")

    def on_file_picker_result(self, e: ft.FilePickerResultEvent):
        if not e.files:
            return
        
        upload_dir = "uploads"
        os.makedirs(upload_dir, exist_ok=True)
        for f in e.files:
            dest = os.path.join(upload_dir, f.name)
            shutil.copy(f.path, dest)  # Requiere import shutil
            self.resources.append(dest)
        
        # Actualizar asignación
        AssignmentSystem.update_assignment(
            self.assignment["id"],
            {"resources": self.resources}
        )
        
        self.page.snack_bar = ft.SnackBar(
            ft.Text(f"Recursos subidos: {len(e.files)}"), 
            open=True
        )
        self.page.update()

    def _download_file(self, file_path):
        # Implementar descarga real
        self.page.snack_bar = ft.SnackBar(
            ft.Text(f"Descargar: {os.path.basename(file_path)}"), 
            open=True
        )
        self.page.update()

    def _mark_done(self):
        self.status = "done"
        AssignmentSystem.update_assignment(
            self.assignment["id"],
            {"status": "done"}
        )
        self.page.snack_bar = ft.SnackBar(
            ft.Text("Asignación marcada como completada"), 
            open=True
        )
        self.page.update()

    def _delete_assignment(self):
        AssignmentSystem.delete_assignment(self.assignment["id"])
        self.page.snack_bar = ft.SnackBar(
            ft.Text("Asignación eliminada"), 
            open=True
        )
        # Retrasar la navegación para mostrar el snackbar
        time.sleep(1)
        NavigationController.update_view("Clases")

    def build(self):
        navbar = ft.Container(
            bgcolor="white",
            padding=ft.padding.symmetric(horizontal=24, vertical=8),
            shadow=ft.BoxShadow(blur_radius=2, offset=ft.Offset(0,1), color="#00000010"),
            content=ft.Row([
                ft.IconButton(
                    icon=ft.Icons.ARROW_BACK,
                    on_click=lambda e: NavigationController.update_view("Clases"),
                    tooltip="Volver"
                ),
                ft.Text(self.assignment["title"], size=20, weight=ft.FontWeight.BOLD),
                ft.Container(expand=True),
                # SOLUCIÓN: Container en lugar de Badge
                ft.Container(
                    content=ft.Text(
                        "Completada" if self.status == "done" else "Pendiente", 
                        size=12,
                        color="white"
                    ),
                    bgcolor="#10B981" if self.status == "done" else "#F59E0B",
                    padding=ft.padding.symmetric(horizontal=10, vertical=4),
                    border_radius=20
                )
            ])
        )
        # Tarjeta de detalles
        detail_card = ft.Card(
            elevation=3,
            content=ft.Container(
                padding=ft.padding.all(24),
                content=ft.Column([
                    # Encabezado con fechas
                    ft.Row([
                        ft.Column([
                            ft.Text("Fecha de inicio:", size=12, color="#6B7280"),
                            ft.Text(self.assignment["start"], size=14, weight=ft.FontWeight.BOLD)
                        ]),
                        ft.Column([
                            ft.Text("Fecha de entrega:", size=12, color="#6B7280"),
                            ft.Text(self.assignment["end"], size=14, weight=ft.FontWeight.BOLD, 
                                    color="#EF4444" if self.status == "pending" else None)
                        ])
                    ], spacing=40),
                    
                    # Descripción
                    ft.Divider(height=24),
                    ft.Text("Descripción:", size=16, weight=ft.FontWeight.BOLD),
                    ft.Text(
                        self.assignment.get("description", "Descripción no disponible."),
                        size=14,
                        color="#4B5563"
                    ),
                    
                    # Recursos
                    ft.Divider(height=24),
                    ft.Text("Recursos:", size=16, weight=ft.FontWeight.BOLD),
                    ft.Column(
                        controls=[
                            ft.ListTile(
                                leading=ft.Icon(ft.Icons.ATTACH_FILE),
                                title=ft.Text(os.path.basename(res)),
                                trailing=ft.IconButton(
                                    icon=ft.Icons.DOWNLOAD,
                                    on_click=lambda e, r=res: self._download_file(r)
                                )
                            ) for res in self.resources
                        ] if self.resources else [
                            ft.Text("No hay recursos adjuntos", italic=True, color="#9CA3AF")
                        ]
                    ),
                    
                    # Subir nuevos recursos
                    ft.ElevatedButton(
                        "Subir recursos adicionales",
                        icon=ft.Icons.UPLOAD_FILE,
                        on_click=lambda e: self.file_picker.pick_files(allow_multiple=True)
                    ),
                    
                    # Acciones
                    ft.Divider(height=32),
                    ft.ResponsiveRow(
                        columns=12,
                        controls=[
                            ft.ElevatedButton(
                                "Marcar como completada",
                                icon=ft.Icons.CHECK_CIRCLE,
                                col=4,
                                bgcolor="#10B981" if self.status == "done" else None,
                                color="white" if self.status == "done" else None,
                                on_click=lambda e: self._mark_done(),
                                disabled=self.status == "done"
                            ),
                            ft.Container(col=4),
                            ft.ElevatedButton(
                                "Eliminar asignación",
                                icon=ft.Icons.DELETE,
                                col=4,
                                bgcolor="#FEE2E2",
                                color="#EF4444",
                                on_click=lambda e: self._delete_assignment()
                            )
                        ]
                    )
                ], spacing=16)
            ),
            margin=ft.margin.symmetric(horizontal=24, vertical=16)
        )

        return ft.Column([navbar, detail_card], expand=True)

# Asegúrate de incluir "ClassDetail" en tu NavigationController.update_view











class RecuperarContrasenaPage(BasePage):
    def __init__(self, page: ft.Page, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        # Campos del formulario
        self.email_field = ft.TextField(
            label="Correo electrónico",
            hint_text="tucorreo@gmail.com",
            keyboard_type=ft.KeyboardType.EMAIL,
            expand=True
        )
        self.new_pw_field = ft.TextField(
            label="Nueva contraseña",
            password=True,
            can_reveal_password=True,
            expand=True
        )
        self.confirm_pw_field = ft.TextField(
            label="Confirmar contraseña",
            password=True,
            can_reveal_password=True,
            expand=True
        )

    def build(self):
        # 1) Panel izquierdo: mensaje de recuperación
        left_panel = ft.Container(
        expand=True,
        padding=ft.padding.symmetric(horizontal=48, vertical=48),
        bgcolor=None,  # quitamos el color directo
        gradient=ft.LinearGradient(
            begin=ft.alignment.top_left,
            end=ft.alignment.bottom_right,
            colors=["#FFFBEB", "#FEF3C7"]
        ),
        content=ft.Column(
            [
                # Icono grande arriba
                ft.Icon(
                    ft.Icons.LOCK_RESET,
                    size=64,
                    color="#92400E"
                ),
                ft.Container(height=24),
                # Título principal
                ft.Text(
                    "¿Olvidaste tu contraseña?",
                    size=36,
                    weight=ft.FontWeight.BOLD,
                    color="#92400E"
                ),
                ft.Container(height=16),
                # Card semitransparente para el texto
                ft.Container(
                    padding=ft.padding.all(20),
                    bgcolor="#FFFFFFDD",  # blanco con opacidad
                    border_radius=ft.border_radius.all(16),
                    shadow=ft.BoxShadow(blur_radius=8, offset=ft.Offset(0,2), color="#00000010"),
                    content=ft.Text(
                        "No te preocupes. Solo introduce tu correo y crea una nueva contraseña para volver a entrar.",
                        size=16,
                        color="#4B5563",
                        text_align=ft.TextAlign.LEFT
                    )
                ),
                ft.Container(height=24),
                # Botón Leer más
                ft.TextButton(
                    "Leer más",
                    on_click=lambda e: print("Mostrar ayuda adicional"),
                    style=ft.ButtonStyle(
                        color={"": "#92400E"},
                        text_style=ft.TextStyle(decoration=ft.TextDecoration.UNDERLINE),
                        padding=ft.padding.symmetric(horizontal=20, vertical=10)
                    )
                )
            ],
            alignment=ft.MainAxisAlignment.START,
            horizontal_alignment=ft.CrossAxisAlignment.START,
            spacing=0
        )
    )


        # 2) Panel derecho: formulario de reset
        form_card = ft.Container(
            width=440,
            padding=ft.padding.all(32),
            bgcolor="white",
            border_radius=ft.border_radius.all(16),
            shadow=ft.BoxShadow(blur_radius=12, offset=ft.Offset(0,4), color="#00000015"),
            content=ft.Column(
                [
                    ft.Text("Restablecer contraseña",
                            size=28,
                            weight=ft.FontWeight.BOLD,
                            color="#92400E"),
                    ft.Container(height=24),
                    self.email_field,
                    ft.Container(height=16),
                    self.new_pw_field,
                    ft.Container(height=16),
                    self.confirm_pw_field,
                    ft.Container(height=32),
                    ft.ElevatedButton(
                        "Restablecer contraseña",
                        on_click=self._on_reset,
                        bgcolor="#92400E",
                        color="white",
                        style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=24)),
                        width=220,
                        height=48
                    )
                ],
                spacing=12,
                alignment=ft.MainAxisAlignment.START
            )
        )

        right_panel = ft.Container(
            expand=True,
            alignment=ft.alignment.center,
            content=form_card
        )

        # 3) Ensamblar el layout de dos columnas
        return ft.Row(
            controls=[left_panel, right_panel],
            expand=True,
            spacing=0
        )

    def _on_reset(self, e):
        email   = self.email_field.value.strip()
        new_pw  = self.new_pw_field.value
        confirm = self.confirm_pw_field.value

        if not email or not new_pw or new_pw != confirm:
            # 1) Construir SnackBar de error
            self.page.snack_bar = ft.SnackBar(
                content=ft.Text("Revisa los campos y asegúrate de que las contraseñas coincidan."),
                bgcolor="#F87171",
                open=True,
                duration=3000  # se cierra solo tras 3s
            )
            # 2) Actualizar para que aparezca
            self.page.update()
            return

        # 1) Construir SnackBar de éxito con acción para volver al login
        self.page.snack_bar = ft.SnackBar(
            content=ft.Text("La contraseña se guardó exitosamente 🎉"),
            action="Volver al login",
            on_action=lambda sb_e: NavigationController.update_view("Login"),
            open=True,
            duration=5000  # se cierra tras 5s (si el usuario no pulsa la acción)
        )

        # 2) Actualizar para que aparezca
        self.page.update()











class UserProfilePage(BasePage):
    def __init__(self, page: ft.Page, current_user: dict, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        self.current_user = current_user
        
        # FilePicker para subida de imágenes
        self.file_picker = ft.FilePicker(on_result=self._handle_file_pick)
        self.page.overlay.append(self.file_picker)
        
        # Estilo reutilizable para campos de texto
        def input_style():
            return {
                "border": ft.InputBorder.NONE,
                "filled": True,
                "bgcolor": ft.Colors.with_opacity(0.03, ft.Colors.BLUE_GREY),
                "content_padding": ft.padding.symmetric(vertical=16, horizontal=20),
                "text_size": 16,
                "label_style": ft.TextStyle(
                    color=ft.Colors.BLUE_GREY_600,
                    size=14
                ),
                "border_radius": 12,
                "focused_bgcolor": ft.Colors.with_opacity(0.05, ft.Colors.BLUE_700),
                "cursor_color": ft.Colors.BLUE_700
            }
        
        # Campos con diseño premium
        self.full_name_field = ft.TextField(
            label="Nombre completo",
            value=current_user["name"],
            **input_style()
        )
        
        self.photo_field = ft.TextField(
            label="URL de la foto",
            value=current_user["photo_url"],
            **input_style(),
            suffix=ft.IconButton(
                icon=ft.Icons.UPLOAD_FILE,
                icon_size=20,
                icon_color=ft.Colors.BLUE_GREY_600,
                on_click=self._upload_photo,
                tooltip="Subir imagen",
                style=ft.ButtonStyle(
                    bgcolor=ft.Colors.TRANSPARENT,
                    overlay_color=ft.Colors.with_opacity(0.1, ft.Colors.BLUE_700)
                )
            ),
            on_change=self.update_avatar
        )
        
        # Switch con diseño simplificado pero profesional
        self.dark_mode_switch = ft.Switch(
            label="Modo oscuro",
            value=(self.page.theme_mode == ft.ThemeMode.DARK),
            on_change=self._toggle_dark_mode,
            thumb_color=ft.Colors.BLUE_700,
            active_track_color=ft.Colors.BLUE_200
        )
        
        # Avatar personalizado con manejo de carga manual
        self.avatar_container = ft.Container(
            width=160,
            height=160,
            border_radius=100,
            border=ft.border.all(3, ft.Colors.BLUE_50),
            clip_behavior=ft.ClipBehavior.ANTI_ALIAS,
            alignment=ft.alignment.center,
            content=self._build_avatar_content()
        )

    def _build_avatar_content(self):
        """Construye el contenido del avatar basado en el estado actual"""
        if not self.current_user["photo_url"]:
            return ft.Icon(
                ft.Icons.PERSON, 
                size=80, 
                color=ft.Colors.BLUE_GREY_300
            )
        
        # En lugar de usar loading_content/error_content, usaremos un enfoque manual
        return ft.Image(
            src=self.current_user["photo_url"],
            width=160,
            height=160,
            fit=ft.ImageFit.COVER,
        )

    def _toggle_dark_mode(self, e):
        self.page.theme_mode = ft.ThemeMode.DARK if e.control.value else ft.ThemeMode.LIGHT
        self.page.client_storage.set("theme_mode", "dark" if e.control.value else "light")
        self._apply_theme()
        self.page.update()

    def _apply_theme(self):
        """Aplica estilos basados en el tema actual"""
        if self.page.theme_mode == ft.ThemeMode.DARK:
            self.page.bgcolor = ft.Colors.GREY_900
        else:
            self.page.bgcolor = ft.Colors.WHITE

    def _upload_photo(self, e):
        """Inicia el proceso de selección de archivo"""
        self.file_picker.pick_files(
            "Seleccionar imagen", 
            file_type="image",
            allowed_extensions=["jpg", "jpeg", "png", "gif"]
        )

    def _handle_file_pick(self, e: ft.FilePickerResultEvent):
        """Procesa la imagen seleccionada"""
        if e.files:
            file = e.files[0]
            try:
                # Mostrar indicador de carga
                self.avatar_container.content = ft.ProgressRing(width=60, height=60, stroke_width=3)
                self.avatar_container.update()
                
                # Leer y convertir a base64
                with open(file.path, "rb") as f:
                    data = base64.b64encode(f.read()).decode()
                    extension = os.path.splitext(file.name)[1].replace(".", "")
                    self.photo_field.value = f"data:image/{extension};base64,{data}"
                    self.photo_field.update()
                    self.update_avatar()
            except Exception as ex:
                self._show_error(f"Error al cargar imagen: {str(ex)}")
                # Mostrar icono de error
                self.avatar_container.content = ft.Icon(ft.Icons.ERROR, size=60, color=ft.Colors.RED_400)
                self.avatar_container.update()

    def update_avatar(self, e=None):
        """Actualiza el avatar con la nueva URL/imagen"""
        if self.photo_field.value:
            # Mostrar la nueva imagen
            self.avatar_container.content = ft.Image(
                src=self.photo_field.value,
                width=160,
                height=160,
                fit=ft.ImageFit.COVER,
            )
        else:
            # Volver al icono predeterminado
            self.avatar_container.content = ft.Icon(
                ft.Icons.PERSON, 
                size=80, 
                color=ft.Colors.BLUE_GREY_300
            )
        
        self.avatar_container.update()

    def _show_error(self, message):
        """Muestra un mensaje de error"""
        self.page.snack_bar = ft.SnackBar(
            ft.Text(message, color=ft.Colors.WHITE),
            bgcolor=ft.Colors.RED_400,
            open=True
        )
        self.page.update()

    def _show_success(self, message):
        """Muestra un mensaje de éxito"""
        self.page.snack_bar = ft.SnackBar(
            content=ft.Row([
                ft.Icon(ft.Icons.CHECK_CIRCLE_OUTLINED, color=ft.Colors.WHITE, size=24),
                ft.Text(message, color=ft.Colors.WHITE, size=16),
            ], spacing=15, alignment=ft.MainAxisAlignment.CENTER),
            bgcolor=ft.Colors.GREEN_600,
            behavior=ft.SnackBarBehavior.FLOATING,
            shape=ft.RoundedRectangleBorder(radius=20),
            padding=ft.padding.symmetric(horizontal=30, vertical=18),
            elevation=8,
            open=True
        )

    def _is_valid_url(self, url):
        """Valida si una URL es válida"""
        try:
            result = urlparse(url)
            return all([result.scheme, result.netloc])
        except:
            return False

    def _save_profile(self, e):
        # Validación de nombre
        if not self.full_name_field.value.strip():
            self._show_error("El nombre no puede estar vacío")
            return
            
        # Validación de URL de imagen
        if self.photo_field.value and not (
            self.photo_field.value.startswith("data:image") or 
            self._is_valid_url(self.photo_field.value)
        ):
            self._show_error("La URL de la foto no es válida")
            return
            
        # Actualizar datos
        self.current_user["name"] = self.full_name_field.value
        self.current_user["photo_url"] = self.photo_field.value
        
        # Mostrar confirmación
        self._show_success("Perfil actualizado con éxito")
        self.page.update()

    def build(self):
        primary_color = ft.Colors.BLUE_700
        accent_color = ft.Colors.CYAN_400
        
        # Barra de navegación profesional
        navbar = ft.Container(
            height=70,
            padding=ft.padding.symmetric(horizontal=24),
            bgcolor=ft.Colors.WHITE,
            border=ft.border.only(bottom=ft.border.BorderSide(1, ft.Colors.GREY_100)),
            content=ft.Row([
                ft.IconButton(
                    icon=ft.Icons.ARROW_BACK_IOS_ROUNDED,
                    icon_size=22,
                    icon_color=ft.Colors.BLUE_GREY_700,
                    tooltip="Volver",
                    on_click=lambda e: NavigationController.update_view("Clases"),
                    style=ft.ButtonStyle(
                        shape=ft.RoundedRectangleBorder(radius=8),
                        bgcolor=ft.Colors.with_opacity(0.05, ft.Colors.BLUE_GREY)
                    )
                ),
                ft.Container(width=16),
                ft.Text(
                    "Mi Perfil",
                    size=20,
                    weight=ft.FontWeight.BOLD,
                    color=ft.Colors.BLUE_GREY_900,
                    font_family="Poppins"
                )
            ], alignment=ft.MainAxisAlignment.START),
        )
        
        # Banner con gradiente sutil
        banner = ft.Container(
            height=180,
            gradient=ft.LinearGradient(
                begin=ft.alignment.top_center,
                end=ft.alignment.bottom_center,
                colors=[
                    ft.Colors.with_opacity(0.8, primary_color),
                    ft.Colors.with_opacity(0.4, accent_color)
                ]
            ),
            border_radius=ft.border_radius.only(bottom_left=32, bottom_right=32),
            animate=ft.Animation(duration=500, curve="easeInOut")
        )
        
        # Avatar con efecto premium
        avatar_container = ft.Container(
            margin=ft.margin.only(top=-80),
            alignment=ft.alignment.center,
            content=ft.Stack(
                [
                    self.avatar_container,
                    ft.Container(
                        width=36,
                        height=36,
                        right=0,
                        bottom=0,
                        border_radius=18,
                        bgcolor=ft.Colors.WHITE,
                        border=ft.border.all(2, ft.Colors.BLUE_50),
                        content=ft.IconButton(
                            icon=ft.Icons.EDIT,
                            icon_size=18,
                            icon_color=primary_color,
                            on_click=self._upload_photo,
                            tooltip="Cambiar foto",
                            style=ft.ButtonStyle(
                                padding=ft.padding.all(0),
                                shape=ft.RoundedRectangleBorder(radius=9)
                            )
                        )
                    )
                ]
            )
        )
        
        # Tarjeta de promedio responsiva (CORRECCIÓN APLICADA)
        average_card = ft.Container(
            width=min(320, self.page.width * 0.9),
            height=140,
            padding=ft.padding.symmetric(vertical=20, horizontal=24),
            bgcolor=ft.Colors.WHITE,
            border_radius=20,
            border=ft.border.all(1, ft.Colors.BLUE_50),
            shadow=ft.BoxShadow(
                blur_radius=15,
                spread_radius=-5,
                color=ft.Colors.with_opacity(0.15, ft.Colors.BLACK),
                offset=ft.Offset(0, 5)
            ),
            content=ft.Column(
                horizontal_alignment=ft.CrossAxisAlignment.START,
                spacing=8,
                controls=[
                    ft.Text(
                        "PROMEDIO GENERAL",
                        size=12,
                        color=ft.Colors.BLUE_GREY_500,
                        weight=ft.FontWeight.BOLD  # Sin letter_spacing
                    ),
                    ft.Row(
                        alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                        controls=[
                            ft.Text(
                                "8.7",
                                size=42,
                                weight=ft.FontWeight.BOLD,
                                color=primary_color,
                                font_family="Poppins"
                            ),
                            ft.Container(
                                width=120,
                                height=8,
                                border_radius=4,
                                bgcolor=ft.Colors.with_opacity(0.1, ft.Colors.BLUE_GREY),
                                content=ft.Container(
                                    width=102,
                                    bgcolor=ft.Colors.GREEN_600,
                                    border_radius=4
                                )
                            )
                        ]
                    ),
                    ft.Text(
                        "Sobresaliente - Top 10% de la clase",
                        size=14,
                        color=ft.Colors.BLUE_GREY_600
                    )
                ]
            )
        )
    

        
        # Sección de formulario con diseño premium
        form_section = ft.Container(
            padding=ft.padding.symmetric(horizontal=24, vertical=24),
            bgcolor=ft.Colors.WHITE,
            border_radius=ft.border_radius.only(top_left=32, top_right=32),
            shadow=ft.BoxShadow(
                blur_radius=20,
                spread_radius=-5,
                color=ft.Colors.with_opacity(0.1, ft.Colors.BLACK),
                offset=ft.Offset(0, -5)
            ),
            content=ft.Column(
                spacing=24,
                controls=[
                    ft.Text(
                        "Información del perfil",
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.BLUE_GREY_900,
                        font_family="Poppins"
                    ),
                    
                    ft.Column(
                        spacing=4,
                        controls=[
                            ft.Text(
                                "Nombre completo",
                                size=14,
                                color=ft.Colors.BLUE_GREY_600,
                                weight=ft.FontWeight.W_500
                            ),
                            self.full_name_field
                        ]
                    ),
                    
                    ft.Column(
                        spacing=4,
                        controls=[
                            ft.Text(
                                "Foto de perfil",
                                size=14,
                                color=ft.Colors.BLUE_GREY_600,
                                weight=ft.FontWeight.W_500
                            ),
                            self.photo_field
                        ]
                    ),
                    
                    ft.Divider(height=1, color=ft.Colors.GREY_100),
                    
                    ft.Column(
                        spacing=16,
                        controls=[
                            ft.Text(
                                "Preferencias de visualización",
                                size=18,
                                weight=ft.FontWeight.BOLD,
                                color=ft.Colors.BLUE_GREY_900,
                                font_family="Poppins"
                            ),
                            ft.Row(
                                alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                                controls=[
                                    ft.Row(
                                        spacing=12,
                                        controls=[
                                            ft.Icon(ft.Icons.BRIGHTNESS_4_ROUNDED, 
                                                    size=24, 
                                                    color=ft.Colors.AMBER_600),
                                            ft.Text(
                                                "Modo oscuro",
                                                size=16,
                                                color=ft.Colors.BLUE_GREY_700
                                            )
                                        ]
                                    ),
                                    self.dark_mode_switch
                                ]
                            )
                        ]
                    )
                ]
            )
        )
        
        # Botones de acción con diseño profesional
        # Botones de acción con diseño profesional
        action_buttons = ft.Container(
            padding=ft.padding.symmetric(horizontal=24, vertical=16),
            content=ft.Row(
                spacing=16,
                controls=[
                    ft.OutlinedButton(
                        text="Cancelar",
                        icon=ft.Icons.CANCEL_OUTLINED,
                        on_click=lambda e: NavigationController.update_view("Clases"),
                        style=ft.ButtonStyle(
                            padding=ft.padding.symmetric(vertical=16, horizontal=28),
                            shape=ft.RoundedRectangleBorder(radius=14),
                            side=ft.BorderSide(1.5, ft.Colors.BLUE_GREY_300)
                        )
                    ),
                    ft.Container(expand=True),
                    ft.FilledButton(
                        text="Guardar cambios",
                        icon=ft.Icons.SAVE_ROUNDED,
                        on_click=self._save_profile,
                        style=ft.ButtonStyle(
                            padding=ft.padding.symmetric(vertical=16, horizontal=32),
                            shape=ft.RoundedRectangleBorder(radius=14),
                            bgcolor=primary_color,
                            color=ft.Colors.WHITE,  # Color del texto
                            overlay_color=ft.Colors.with_opacity(0.1, ft.Colors.WHITE)
                        )
                    )
                ]
            )
        )

        # Estructura principal
        content = ft.Column(
            spacing=0,
            controls=[
                banner,
                avatar_container,
                ft.Container(height=30),
                
                # Información del usuario
                ft.Column(
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    spacing=6,
                    controls=[
                        ft.Text(
                            self.current_user["name"],
                            size=26,
                            weight=ft.FontWeight.BOLD,
                            font_family="Poppins",
                            color=ft.Colors.BLUE_GREY_900
                        ),
                        ft.Text(
                            self.current_user.get("email", "usuario@ejemplo.com"),
                            size=16,
                            color=ft.Colors.BLUE_GREY_600
                        ),
                        ft.Container(height=8),
                        ft.Row(
                            spacing=6,
                            controls=[
                                ft.Icon(ft.Icons.SCHOOL, size=16, color=ft.Colors.BLUE_GREY_500),
                                ft.Text(
                                    "Ingeniería Multimedia - 4° Semestre",
                                    size=14,
                                    color=ft.Colors.BLUE_GREY_500
                                )
                            ]
                        )
                    ]
                ),
                
                ft.Container(height=40),
                
                # Tarjeta de promedio
                ft.Row(
                    [average_card],
                    alignment=ft.MainAxisAlignment.CENTER
                ),
                
                ft.Container(height=40),
                
                # Sección de formulario
                form_section,
                
                # Botones de acción
                action_buttons,
                
                # Pie de página
                ft.Container(
                    padding=ft.padding.symmetric(vertical=20),
                    alignment=ft.alignment.center,
                    content=ft.Text(
                        "© 2023 PointList - Todos los derechos reservados",
                        size=14,
                        color=ft.Colors.BLUE_GREY_400
                    )
                )
            ]
        )
        
        # Contenedor principal con desplazamiento
        scrollable_content = ft.ListView(
            expand=True,
            spacing=0,
            padding=0,
            auto_scroll=False
        )
        scrollable_content.controls.append(content)
        
        return ft.Column(
            spacing=0,
            controls=[
                navbar,
                ft.Container(
                    expand=True,
                    content=scrollable_content
                )
            ]
        )



      
#APARTADO DE MENSAJERIA, YA EL PENULTIMO DIOS 🙌
    


# --- Modelo de Mensaje ---
# Añadir al inicio del archivo
# ---------------------------
# IMPLEMENTACIÓN DE MENSAJERÍA CORREGIDA
# ---------------------------

MESSAGES_CSV = "messages.csv"
# Inicialización del archivo CSV
if not os.path.exists(MESSAGES_CSV) or os.path.getsize(MESSAGES_CSV) < 10:
    sample_data = [
        {"sender": "Ana García", "receiver": current_user["name"], "text": "Hola, ¿viste la tarea?", "timestamp": "2025-05-15T10:30:00", "read": False},
        {"sender": current_user["name"], "receiver": "Ana García", "text": "Sí, la estoy haciendo ahora", "timestamp": "2025-05-15T10:32:00", "read": True},
        {"sender": "Carlos López", "receiver": current_user["name"], "text": "Reunión mañana a las 9", "timestamp": "2025-05-16T14:20:00", "read": False},
        {"sender": "Prof. Jiménez", "receiver": current_user["name"], "text": "Recordatorio: Examen el viernes", "timestamp": "2025-05-17T08:15:00", "read": False},
        {"sender": current_user["name"], "receiver": "Prof. Jiménez", "text": "¿Qué temas entrarán?", "timestamp": "2025-05-17T08:17:00", "read": True},
    ]
    pd.DataFrame(sample_data).to_csv(MESSAGES_CSV, index=False)

message_lock = threading.Lock()

class MessageSystem:
    @staticmethod
    def save_message(sender: str, receiver: str, text: str):
        new_msg = {
            "sender": sender,
            "receiver": receiver,
            "text": text,
            "timestamp": datetime.now().isoformat(),
            "read": False
        }
        
        with message_lock:
            try:
                df = pd.read_csv(MESSAGES_CSV)
            except:
                df = pd.DataFrame(columns=["sender", "receiver", "text", "timestamp", "read"])
            
            df = pd.concat([df, pd.DataFrame([new_msg])], ignore_index=True)
            df.to_csv(MESSAGES_CSV, index=False)
    
    @staticmethod
    def get_messages(user: str, contact: str):
        try:
            df = pd.read_csv(MESSAGES_CSV)
            filtered = df[((df['sender'] == user) & (df['receiver'] == contact)) | 
                         ((df['sender'] == contact) & (df['receiver'] == user))]
            return filtered.sort_values("timestamp").to_dict('records')
        except:
            return []
    
    @staticmethod
    def get_contacts(user: str):
        try:
            df = pd.read_csv(MESSAGES_CSV)
            senders = df[df['receiver'] == user]['sender'].unique()
            receivers = df[df['sender'] == user]['receiver'].unique()
            contacts = list(set(list(senders) + list(receivers)))
            return [c for c in contacts if c != user]
        except:
            return []
    
    @staticmethod
    def mark_as_read(user: str, contact: str):
        try:
            df = pd.read_csv(MESSAGES_CSV)
            mask = (df['sender'] == contact) & (df['receiver'] == user) & (df['read'] == False)
            df.loc[mask, 'read'] = True
            df.to_csv(MESSAGES_CSV, index=False)
            return True
        except Exception as e:
            print(f"Error marcando como leído: {e}")
            return False
    
    @staticmethod
    def get_unread_count(user: str, contact: str):
        try:
            df = pd.read_csv(MESSAGES_CSV)
            unread = df[(df['sender'] == contact) & 
                        (df['receiver'] == user) & 
                        (df['read'] == False)]
            return len(unread)
        except:
            return 0

    @staticmethod
    def get_last_message(user: str, contact: str):
        try:
            messages = MessageSystem.get_messages(user, contact)
            if messages:
                return messages[-1]
            return None
        except:
            return None

class ChatBubble(ft.Container):
    def __init__(self, message: dict, is_me: bool):
        try:
            dt = datetime.fromisoformat(message['timestamp'])
            time_str = dt.strftime("%H:%M")
        except:
            time_str = "Ahora"
        
        read_status = None
        if is_me:
            read_status = ft.Icon(
                ft.Icons.DONE_ALL,
                size=14,
                color="#34D399" if message.get('read', False) else "#A5B4FC"
            )
        
        content_elements = []
        if not is_me:
            content_elements.append(
                ft.Text(message['sender'], 
                        size=12, 
                        color="#4B5563",
                        weight=ft.FontWeight.BOLD)
            )
        
        content_elements.append(
            ft.Text(message['text'], 
                    size=14, 
                    color="white" if is_me else "black")
        )
        
        row_elements = [
            ft.Text(time_str, 
                    size=10, 
                    color="#E5E7EB" if is_me else "#6B7280")
        ]
        if is_me:
            row_elements.append(read_status)
        
        content_elements.append(
            ft.Row(row_elements, alignment=ft.MainAxisAlignment.END)
        )
        
        super().__init__(
            padding=ft.padding.symmetric(horizontal=16, vertical=10),
            margin=ft.margin.only(
                left=60 if not is_me else 0,
                right=0 if not is_me else 60,
                bottom=8
            ),
            bgcolor="#2563EB" if is_me else "#F3F4F6",
            border_radius=ft.border_radius.only(
                top_left=20,
                top_right=20,
                bottom_left=5 if is_me else 20,
                bottom_right=20 if is_me else 5
            ),
            shadow=ft.BoxShadow(
                spread_radius=0.5,
                blur_radius=5,
                color=ft.Colors.BLACK12,
            ),
            content=ft.Column(content_elements, tight=True, spacing=4)
        )

class MessagingPage(BasePage):
    def __init__(self, page: ft.Page, **kwargs):
        super().__init__(**kwargs)
        self.page = page
        self.current_user = current_user["name"]
        self.selected_contact = None
        self.contacts = []
        self.messages = []
        self.unread_counts = {}
        self.online_contacts = ["Ana García", "Prof. Jiménez"]
        
        self.chat_list = ft.ListView(
            expand=True, 
            spacing=8, 
            auto_scroll=True,
            padding=ft.padding.symmetric(horizontal=16, vertical=8)
        )
        self.message_input = ft.TextField(
            hint_text="Escribe un mensaje...",
            multiline=True,
            max_lines=3,
            expand=True,
            border_radius=ft.border_radius.all(24),
            border_color="#E5E7EB",
            on_submit=self._send_message
        )
        self.search_field = ft.TextField(
            hint_text="Buscar contacto...",
            prefix_icon=ft.Icons.SEARCH,
            on_change=self._filter_contacts,
            border_radius=ft.border_radius.all(20),
            width=180,
            border_color="#E5E7EB"
        )
        self.contacts_list = ft.ListView(expand=True, spacing=4)
        
        self.running = True
        threading.Thread(target=self._update_thread, daemon=True).start()

    def _load_contacts(self):
        try:
            self.contacts = MessageSystem.get_contacts(self.current_user)
            self._calculate_unread_counts()
            self._filter_contacts()
        except Exception as e:
            print(f"Error cargando contactos: {e}")
            self.contacts = ["Ana García", "Carlos López", "Prof. Jiménez"]
            self.unread_counts = {c: 0 for c in self.contacts}
            self._filter_contacts()

    def _calculate_unread_counts(self):
        self.unread_counts = {}
        for contact in self.contacts:
            self.unread_counts[contact] = MessageSystem.get_unread_count(self.current_user, contact)

    def _filter_contacts(self, e=None):
        search_text = self.search_field.value.lower().strip() if self.search_field.value else ""
        filtered = [c for c in self.contacts if search_text in c.lower()]
        
        controls = []
        for contact in filtered:
            last_message = MessageSystem.get_last_message(self.current_user, contact)
            is_online = contact in self.online_contacts
            
            if last_message:
                sender_init = last_message['sender'][0]
                msg_text = last_message['text']
                if len(msg_text) > 30:
                    display_text = msg_text[:30] + '...'
                else:
                    display_text = msg_text
                subtitle_text = f"{sender_init}: {display_text}"
                last_time = datetime.fromisoformat(last_message['timestamp']).strftime("%H:%M") if 'timestamp' in last_message else ""
            else:
                subtitle_text = ""
                last_time = ""
            
            controls.append(
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Stack([
                            ft.Container(
                                width=42,
                                height=42,
                                border_radius=21,
                                bgcolor=self._get_avatar_color(contact),
                                alignment=ft.alignment.center,
                                content=ft.Text(contact[0].upper(), 
                                                color="white", 
                                                weight=ft.FontWeight.BOLD)
                            ),
                            ft.Container(
                                width=12,
                                height=12,
                                border_radius=6,
                                bgcolor="#10B981" if is_online else "#9CA3AF",
                                right=0,
                                bottom=0,
                                border=ft.border.all(2, "white")
                            )
                        ]),
                        title=ft.Row([
                            ft.Text(contact, weight=ft.FontWeight.BOLD),
                            ft.Container(expand=True),
                            ft.Text(
                                last_time,
                                size=12,
                                color="#6B7280"
                            )
                        ]),
                        subtitle=ft.Text(
                            subtitle_text,
                            max_lines=1,
                            overflow=ft.TextOverflow.ELLIPSIS,
                            color="#6B7280"
                        ),
                        trailing=ft.Container(
                        content=ft.Text(
                            str(self.unread_counts.get(contact, 0)),
                            color="white",
                            size=10,
                            weight=ft.FontWeight.BOLD
                        ),
                        bgcolor="#3B82F6",
                        padding=ft.padding.symmetric(horizontal=6, vertical=2),
                        border_radius=12,
                        alignment=ft.alignment.center,
                    ) if self.unread_counts.get(contact, 0) > 0 else None,
                        on_click=lambda e, c=contact: self._select_contact(c),
                    ),
                    bgcolor="#EFF6FF" if contact == self.selected_contact else "white",
                    border_radius=ft.border_radius.all(12),
                    padding=ft.padding.symmetric(vertical=4, horizontal=8)
                )
            )
        
        self.contacts_list.controls = controls
        if self.contacts_list.page is not None:
            self.contacts_list.update()

    def _get_avatar_color(self, name: str):
        colors = [
            "#EF4444", "#F59E0B", "#10B981", "#3B82F6", 
            "#6366F1", "#8B5CF6", "#EC4899", "#6B7280"
        ]
        return colors[hash(name) % len(colors)]

    def _select_contact(self, contact):
        try:
            self.selected_contact = contact
            self.messages = MessageSystem.get_messages(self.current_user, contact)
            
            MessageSystem.mark_as_read(self.current_user, contact)
            self.unread_counts[contact] = 0
            
            self._refresh_chat_view()
            self._filter_contacts()
            
            if self.page:
                self.page.update()
        except Exception as e:
            print(f"Error seleccionando contacto: {e}")

    def _refresh_chat_view(self):
        try:
            self.chat_list.controls.clear()
            
            grouped = {}
            for msg in self.messages:
                try:
                    dt = datetime.fromisoformat(msg['timestamp'])
                    date_str = dt.strftime("%d %b %Y")
                except:
                    date_str = "Hoy"
                    
                if date_str not in grouped:
                    grouped[date_str] = []
                grouped[date_str].append(msg)
            
            for date, messages in grouped.items():
                self.chat_list.controls.append(
                    ft.Container(
                        content=ft.Text(date, size=12, color="#6B7280"),
                        alignment=ft.alignment.center,
                        padding=10
                    )
                )
                
                for msg in messages:
                    is_me = msg["sender"] == self.current_user
                    self.chat_list.controls.append(ChatBubble(msg, is_me))
            
            if self.chat_list.page is not None:
                self.chat_list.scroll_to(offset=-1, duration=300)
                self.chat_list.update()
        except Exception as e:
            print(f"Error actualizando chat: {e}")

    def _send_message(self, e):
        try:
            text = self.message_input.value.strip()
            if not text or not self.selected_contact:
                return
                
            MessageSystem.save_message(self.current_user, self.selected_contact, text)
            self.message_input.value = ""
            self._load_contacts()
            self.messages = MessageSystem.get_messages(self.current_user, self.selected_contact)
            self._refresh_chat_view()
            
            if self.page:
                self.page.update()
        except Exception as e:
            print(f"Error enviando mensaje: {e}")

    def _update_thread(self):
        while self.running:
            try:
                if hasattr(self, 'page') and self.page:
                    old_contacts = set(self.contacts)
                    self._load_contacts()
                    
                    if set(self.contacts) != old_contacts:
                        self._filter_contacts()
                time.sleep(5)
            except Exception as e:
                print(f"Error en hilo de actualización: {e}")
                time.sleep(10)

    def build(self):
        navbar = ft.Container(
            bgcolor="white",
            padding=ft.padding.symmetric(horizontal=20, vertical=8),
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=10,
                color=ft.Colors.BLACK12,
            ),
            content=ft.Row([
                build_popup_menu(),
                ft.Text("Mensajería", size=20, weight=ft.FontWeight.BOLD, color="#1E40AF"),
                ft.Container(expand=True),
                ft.Text(current_user["name"], color="#2B2B2B"),
                ft.GestureDetector(
                    content=ft.Stack([
                        ft.CircleAvatar(
                            foreground_image_src=current_user["photo_url"],
                            radius=18
                        ),
                        ft.Container(
                            width=12,
                            height=12,
                            border_radius=6,
                            bgcolor="#10B981",
                            right=0,
                            bottom=0,
                            border=ft.border.all(2, "white")
                        )
                    ]),
                    on_tap=lambda e: NavigationController.update_view("Perfil")
                )
            ], alignment=ft.MainAxisAlignment.CENTER)
        )

        contacts_panel = ft.Container(
            width=280,
            padding=ft.padding.symmetric(vertical=12, horizontal=16),
            bgcolor="white",
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=5,
                color=ft.Colors.BLACK12,
                offset=ft.Offset(2, 0)
            ),
            content=ft.Column([
                ft.Row([
                    ft.Text("Conversaciones", weight=ft.FontWeight.BOLD, size=16),
                    ft.Container(expand=True),
                    ft.IconButton(
                        icon=ft.Icons.GROUP_ADD,
                        icon_size=20,
                        tooltip="Nuevo grupo"
                    )
                ]),
                self.search_field,
                ft.Divider(height=1, color="#E5E7EB"),
                self.contacts_list
            ], spacing=12)
        )

        # Construcción dinámica del menú
        menu_items = []
        if self.selected_contact:
            menu_items.append(ft.PopupMenuItem(text="Información del contacto"))
        menu_items.extend([
            ft.PopupMenuItem(text="Archivar chat"),
            ft.PopupMenuItem(text="Silenciar notificaciones"),
        ])
        
        # Construir controles del encabezado de chat dinámicamente
        chat_header_controls = [
            ft.IconButton(
                icon=ft.Icons.ARROW_BACK,
                on_click=lambda e: self._select_contact(None),
                visible=self.selected_contact is not None,
                icon_color="#4B5563"
            )
        ]
        
        # Solo agregar avatar y nombre si hay contacto seleccionado
        if self.selected_contact:
            chat_header_controls.append(
                ft.Stack([
                    ft.Container(
                        width=36,
                        height=36,
                        border_radius=18,
                        bgcolor=self._get_avatar_color(self.selected_contact),
                        alignment=ft.alignment.center,
                        content=ft.Text(
                            self.selected_contact[0].upper(), 
                            color="white", 
                            weight=ft.FontWeight.BOLD
                        )
                    ),
                    ft.Container(
                        width=10,
                        height=10,
                        border_radius=5,
                        bgcolor="#10B981",
                        right=0,
                        bottom=0,
                        border=ft.border.all(2, "white"),
                        visible=self.selected_contact in self.online_contacts
                    )
                ])
            )
            
            contact_info = [
                ft.Text(self.selected_contact, weight=ft.FontWeight.BOLD)
            ]
            if self.selected_contact in self.online_contacts:
                contact_info.append(ft.Text("En línea", size=12, color="#10B981"))
            
            chat_header_controls.append(ft.Column(contact_info, spacing=0))
        else:
            chat_header_controls.append(
                ft.Text("Selecciona un contacto", italic=True, color="#6B7280")
            )
        
        # Agregar controles restantes
        chat_header_controls.extend([
            ft.Container(expand=True),
            ft.IconButton(
                icon=ft.Icons.CALL, 
                icon_color="#4B5563", 
                visible=bool(self.selected_contact)
            ),
            ft.IconButton(
                icon=ft.Icons.VIDEO_CALL, 
                icon_color="#4B5563", 
                visible=bool(self.selected_contact)
            ),
            ft.PopupMenuButton(
                icon=ft.Icons.MORE_VERT,
                items=menu_items
            )
        ])
        
        chat_header = ft.Container(
            padding=ft.padding.symmetric(vertical=12, horizontal=20),
            bgcolor="white",
            border=ft.border.only(bottom=ft.border.BorderSide(1, "#E5E7EB")),
            content=ft.Row(
                chat_header_controls,
                alignment=ft.MainAxisAlignment.CENTER,
                vertical_alignment=ft.CrossAxisAlignment.CENTER
            )
        )

        chat_area = ft.Column(
            expand=True,
            controls=[
                chat_header,
                ft.Container(
                    content=self.chat_list,
                    expand=True,
                    padding=ft.padding.symmetric(horizontal=0, vertical=8),
                    gradient=ft.LinearGradient(
                        begin=ft.alignment.top_center,
                        end=ft.alignment.bottom_center,
                        colors=["#F9FAFB", "#F3F4F6"],
                        stops=[0.3, 1.0]
                    )
                ),
                ft.Container(
                    padding=ft.padding.symmetric(horizontal=16, vertical=8),
                    bgcolor="white",
                    border=ft.border.only(top=ft.border.BorderSide(1, "#E5E7EB")),
                    content=ft.Row([
                        ft.IconButton(
                            icon=ft.Icons.ADD,
                            icon_color="#4B5563",
                            tooltip="Adjuntar archivo"
                        ),
                        ft.IconButton(
                            icon=ft.Icons.IMAGE,
                            icon_color="#4B5563",
                            tooltip="Enviar imagen"
                        ),
                        self.message_input,
                        ft.IconButton(
                            icon=ft.Icons.MIC,
                            icon_color="#4B5563",
                            tooltip="Grabar audio"
                        ),
                        ft.IconButton(
                            icon=ft.Icons.SENTIMENT_SATISFIED,
                            icon_color="#4B5563",
                            tooltip="Emojis"
                        ),
                        ft.IconButton(
                            icon=ft.Icons.SEND,
                            on_click=self._send_message,
                            icon_color="white",
                            bgcolor="#2563EB",
                            tooltip="Enviar mensaje"
                        )
                    ], vertical_alignment=ft.CrossAxisAlignment.CENTER)
                )
            ],
            spacing=0
        )

        estructura = ft.Column([
            navbar,
            ft.Row([
                contacts_panel,
                ft.VerticalDivider(width=1, color="#E5E7EB"),
                ft.Container(chat_area, expand=True)
            ], expand=True, spacing=0)
        ])
        
        self._load_contacts()
        
        return estructura

    def will_unmount(self):
        self.running = False
       











# Configurar la API de Gemini con tu clave
load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY") or "TU_API_KEY"
configure(api_key=API_KEY)
 
# Configurar el modelo
model = GenerativeModel('gemini-1.5-flash-8b')

# Paleta de colores de Point List
COLORES_POINTLIST = {
    "claro": {
        "fondo_principal": "#F3F4F6",
        "fondo_tarjeta": "#FFFFFF",
        "fondo_encabezado": "#EFF6FF",
        "fondo_input": "#FFFFFF",
        "fondo_usuario": "#DBEAFE",  # Azul claro para usuario
        "fondo_bot": "#F0F8FF",       # Azul muy claro para bot
        "borde_usuario": "#3B82F6",   # Borde azul
        "borde_bot": "#BFDBFE",       # Borde azul claro
        "texto_principal": "#1F2937",
        "texto_secundario": "#6B7280",
        "texto_usuario": "#1E3A8A",   # Azul oscuro para nombre usuario
        "texto_bot": "#1E40AF",       # Azul marino para nombre bot
        "sombra": "#D1D5DB",
        "fondo_boton": "#3B82F6",
        "texto_boton": "#FFFFFF"
    },
    "oscuro": {
        "fondo_principal": "#121212",
        "fondo_tarjeta": "#1E1E1E",
        "fondo_encabezado": "#0D1B2A",
        "fondo_input": "#2D3748",
        "fondo_usuario": "#1E3A8A",   # Azul oscuro para usuario
        "fondo_bot": "#1E2A3A",       # Azul marino para bot
        "borde_usuario": "#3B82F6",   # Borde azul
        "borde_bot": "#2C5282",       # Borde azul oscuro
        "texto_principal": "#E5E7EB",
        "texto_secundario": "#A0AEC0",
        "texto_usuario": "#93C5FD",   # Azul claro para nombre usuario
        "texto_bot": "#BFDBFE",       # Azul claro para nombre bot
        "sombra": "#000000",
        "fondo_boton": "#2563EB",
        "texto_boton": "#E5E7EB"
    }
}

# Variables globales para el CSV
df_csv = None
csv_filename = ""
csv_content = ""

def cargar_csv_automatico():
    """Carga automáticamente el archivo CSV más reciente en el directorio (optimizado)"""
    global df_csv, csv_filename, csv_content
    try:
        # Buscar archivos CSV en el directorio actual
        csv_files = [f for f in os.listdir() if f.endswith('.csv')]
        
        if not csv_files:
            return "No se encontraron archivos CSV en el directorio"
        
        # Seleccionar el archivo CSV más reciente
        csv_filename = max(csv_files, key=os.path.getmtime)
        
        # Leer el archivo CSV con diferentes encodings
        try:
            df_csv = pd.read_csv(csv_filename, encoding='utf-8')
        except:
            try:
                df_csv = pd.read_csv(csv_filename, encoding='latin-1')
            except Exception as e:
                return f"Error de encoding: {str(e)}"
        
        # Guardar solo muestra representativa para análisis
        csv_content = df_csv.head(1000).to_csv(index=False)
        
        return f"Archivo CSV cargado: {csv_filename} ({len(df_csv)} filas)"
    except Exception as e:
        return f"Error al cargar CSV: {str(e)}"

# Cargar CSV automáticamente al iniciar
csv_info = cargar_csv_automatico()

def es_pregunta_sobre_csv(pregunta):
    """Determina si la pregunta está relacionada con el CSV cargado (mejorado)"""
    if df_csv is None:
        return False
    
    # Patrones más precisos
    patrones = [
        r"columna\s+\w+",
        r"csv\s+" + re.escape(csv_filename),
        r"datos\s+del\s+archivo",
        r"analiza\s+la\s+tabla",
        r"información\s+del\s+dataset"
    ]
    
    pregunta = pregunta.lower()
    
    # 1. Verificar nombre de columnas
    if any(col.lower() in pregunta for col in df_csv.columns):
        return True
    
    # 2. Verificar patrones específicos
    if any(re.search(patron, pregunta) for patron in patrones):
        return True
        
    # 3. Palabras clave con contexto
    palabras_clave = ["csv", "dataset", "columna", "fila", "tabla", "registros"]
    return any(palabra in pregunta for palabra in palabras_clave)

# CHATBOT CON BARRA FIJA EN EL PIE Y NAVBAR
class ChatBotPage(BasePage):
    def __init__(self, page: ft.Page, **kwargs):
        super().__init__(page=page)
        self.page = page
        self.dark_mode = self.page.theme_mode == ft.ThemeMode.DARK
        self.messages = []
        self.prompts = [
            "¿Cómo repaso para un examen?",
            "Resumen breve de la Revolución Francesa",
            "¿Qué técnica de estudio recomiendas?"
        ]
        # Referencias para elementos dinámicos
        self.chat_ref = ft.Ref[ft.ListView]()
        self.input_ref = ft.Ref[ft.TextField]()
        self.send_ref = ft.Ref[ft.Control]()  # Para botón o icono

    def format_text(self, text):
        """Ajusta texto dinámicamente según ancho de pantalla"""
        if self.page.width < 600:  # Mobile
            chars_per_line = 35
        else:
            chars_per_line = min(80, max(40, int(self.page.width / 10)))
            
        return "\n".join(textwrap.wrap(text, width=chars_per_line))

    def create_message_bubble(self, sender, message, is_user):
        """Crea una burbuja de mensaje responsiva"""
        # Determinar colores según el remitente y tema
        tema_actual = "oscuro" if self.dark_mode else "claro"
        colores = COLORES_POINTLIST[tema_actual]
        
        bg_color = colores["fondo_usuario"] if is_user else colores["fondo_bot"]
        border_color = colores["borde_usuario"] if is_user else colores["borde_bot"]
        text_color = colores["texto_usuario"] if is_user else colores["texto_bot"]
        text_color_content = colores["texto_principal"]
        
        border_radius = ft.border_radius.only(
            top_left=15,
            top_right=15,
            bottom_left=15 if is_user else 0,
            bottom_right=0 if is_user else 15
        )
        
        # Formatear texto para ajustarse al ancho
        formatted_message = self.format_text(message)
        
        return ft.Row(
            [
                ft.Container(
                    content=ft.Column(
                        [
                            ft.Text(sender, size=12, color=text_color, weight="bold"),
                            ft.Text(
                                formatted_message, 
                                color=text_color_content,
                                selectable=True,
                            )
                        ],
                        spacing=3,
                        tight=True
                    ),
                    bgcolor=bg_color,
                    padding=ft.padding.symmetric(horizontal=15, vertical=10),
                    border_radius=border_radius,
                    border=ft.border.all(1, border_color),
                    margin=ft.margin.only(left=100 if is_user else 0, right=0 if is_user else 100),
                    shadow=ft.BoxShadow(
                        blur_radius=3,
                        spread_radius=0,
                        color=colores["sombra"],
                        offset=ft.Offset(1, 1)
                    )
                )
            ],
            alignment="end" if is_user else "start",
            spacing=0
        )

    def enviar_pregunta(self, e):
        """Envía la pregunta al modelo y muestra la respuesta"""
        input_pregunta = self.input_ref.current
        if not input_pregunta.value.strip():
            return
            
        pregunta = input_pregunta.value
        chat = self.chat_ref.current
        
        # Mensaje del usuario
        user_bubble = self.create_message_bubble("Tú", pregunta, True)
        chat.controls.append(user_bubble)
        
        input_pregunta.value = ""
        self.update_ui()
        
        try:
            # Indicador de pensando
            tema_actual = "oscuro" if self.dark_mode else "claro"
            colores = COLORES_POINTLIST[tema_actual]
            
            thinking_indicator = ft.Row(
                [
                    ft.Container(
                        content=ft.Row([
                            ft.ProgressRing(
                                width=16, 
                                height=16, 
                                stroke_width=2, 
                                color=colores["texto_bot"]
                            ),
                            ft.Text(
                                "Analizando datos...", 
                                italic=True, 
                                color=colores["texto_bot"]
                            )
                        ]),
                        padding=10
                    )
                ],
                alignment="start"
            )
            chat.controls.append(thinking_indicator)
            self.update_ui()
            
            # Determinar contexto según el tipo de pregunta
            is_data_question = es_pregunta_sobre_csv(pregunta) and df_csv is not None
            
            if is_data_question:
                prompt = (
                    f"Por favor, analiza el siguiente archivo CSV: '{csv_filename}' "
                    f"que contiene {len(df_csv)} filas y {len(df_csv.columns)} columnas.\n\n"
                    f"Columnas disponibles: {', '.join(df_csv.columns)}\n\n"
                    f"Muestra del CSV (primeras 1000 filas):\n\n"
                    f"{csv_content}\n\n"
                    f"Pregunta: {pregunta}"
                )
            else:
                prompt = pregunta
            
            # Obtener respuesta
            response = model.generate_content(
                prompt,
                generation_config={"max_output_tokens": 4000}
            )
            
            # Eliminar indicador de pensando
            chat.controls.remove(thinking_indicator)
            
            # Mensaje del bot con texto formateado
            bot_bubble = self.create_message_bubble("Bot", response.text, False)
            chat.controls.append(bot_bubble)
            
        except Exception as e:
            error_bubble = self.create_message_bubble("Error", f"Ocurrió un error: {str(e)}", False)
            chat.controls.append(error_bubble)
            
        self.update_ui()
        # Hacer scroll al final
        chat.scroll_to(offset=-1, duration=300)

    def update_ui(self):
        """Actualiza la interfaz y ajusta el botón de enviar"""
        # Actualizar visibilidad del botón de enviar
        if self.send_ref.current:
            self.send_ref.current.visible = bool(self.input_ref.current.value.strip())
        self.page.update()

    def build(self):
        # Obtener usuario actual
        current_user = self.page.client_storage.get("current_user") or {
            "name": "Usuario", 
            "photo_url": None
        }
        
        # Construir navbar
        navbar = ft.Container(
            bgcolor="white",
            padding=ft.padding.symmetric(horizontal=20, vertical=8),
            shadow=ft.BoxShadow(
                spread_radius=0,
                blur_radius=10,
                color=ft.Colors.BLACK12,
            ),
            content=ft.Row([
                build_popup_menu(),
                ft.Text("Chatbot", size=20, weight=ft.FontWeight.BOLD, color="#1E40AF"),
                ft.Container(expand=True),
                ft.Text(current_user["name"], color="#2B2B2B"),
                ft.GestureDetector(
                    content=ft.Stack([
                        ft.CircleAvatar(
                            foreground_image_src=current_user["photo_url"],
                            radius=18
                        ),
                        ft.Container(
                            width=12,
                            height=12,
                            border_radius=6,
                            bgcolor="#10B981",
                            right=0,
                            bottom=0,
                            border=ft.border.all(2, "white")
                        )
                    ]),
                    on_tap=lambda e: NavigationController.update_view("Perfil")
                )
            ], alignment=ft.MainAxisAlignment.CENTER)
        )

        # Determinar tema actual
        tema_actual = "oscuro" if self.dark_mode else "claro"
        colores = COLORES_POINTLIST[tema_actual]
        
        # Configurar fondo principal
        self.page.bgcolor = colores["fondo_principal"]
        
        # Componentes de la UI
        chat = ft.ListView(
            ref=self.chat_ref,
            expand=True,
            spacing=10,
            auto_scroll=True,
            padding=ft.padding.only(bottom=20, top=10, left=10, right=10)
        )
        
        # Campo de texto
        input_pregunta = ft.TextField(
            ref=self.input_ref,
            hint_text="Escribe tu pregunta aquí...",
            hint_style=ft.TextStyle(
                color=colores["texto_secundario"],
                weight=ft.FontWeight.NORMAL
            ),
            text_style=ft.TextStyle(
                color=colores["texto_principal"], 
                size=14,
                weight=ft.FontWeight.NORMAL
            ),
            multiline=True,
            min_lines=1,
            max_lines=8 if self.page.width < 600 else 5,
            expand=True,
            border_radius=15,
            bgcolor=colores["fondo_input"],
            border_color=colores["borde_bot"],
            focused_border_color=colores["texto_bot"],
            cursor_color=colores["texto_bot"],
            selection_color="#80DEEA",
            content_padding=ft.padding.all(12),
            on_change=lambda e: self.update_ui(),
            on_submit=lambda e: self.enviar_pregunta(e),
            shift_enter=True
        )
        
        # Botón de enviar (responsivo)
        if self.page.width < 600:
            btn_enviar = ft.IconButton(
                ref=self.send_ref,
                icon=ft.Icons.SEND,
                bgcolor=colores["fondo_boton"],
                icon_color=colores["texto_boton"],
                tooltip="Enviar pregunta",
                visible=False,
            )
        else:
            btn_enviar = ft.ElevatedButton(
                ref=self.send_ref,
                text="Enviar",
                bgcolor=colores["fondo_boton"],
                color=colores["texto_boton"],
                icon=ft.Icons.SEND,
                style=ft.ButtonStyle(
                    padding=ft.padding.symmetric(horizontal=20, vertical=12),
                    shape=ft.RoundedRectangleBorder(radius=15)
                ),
                visible=False,
            )
        
        btn_enviar.on_click = self.enviar_pregunta
        
        # Crear elementos de la UI
        texto_encabezado = ft.Text("ChatBot Académico", size=20, weight="bold", color=colores["texto_usuario"])
        
        encabezado = ft.Container(
            ft.Row([
                ft.Icon(ft.Icons.SCHOOL, size=28, color=colores["texto_usuario"]),
                texto_encabezado,
                ft.Container(expand=True),
                ft.Icon(ft.Icons.CHECK_CIRCLE, color="#10B981", size=16),
                ft.Text("En línea", size=12, color="#10B981")
            ]),
            padding=ft.padding.symmetric(vertical=15, horizontal=20),
            bgcolor=colores["fondo_encabezado"],
            border_radius=ft.border_radius.vertical(top=15)
        )
        
        # Área de chat principal (con desplazamiento)
        area_chat = ft.Container(
            content=chat,
            expand=True,
            padding=ft.padding.symmetric(horizontal=15),
            bgcolor=colores["fondo_tarjeta"],
            border=ft.border.all(1, colores["sombra"]),
            border_radius=10,
            height=550
        )
        
        # Área de entrada FIJADA EN EL PIE - NO SE MUEVE
        area_entrada = ft.Container(
            content=ft.Row(
                [input_pregunta, btn_enviar],
                alignment="center",
                vertical_alignment="center",
                spacing=10
            ),
            padding=15,
            bgcolor=colores["fondo_tarjeta"],
            border_radius=ft.border_radius.vertical(bottom=15),
            border=ft.border.only(top=ft.border.BorderSide(1, colores["sombra"])),
        )
        
        # Layout principal con barra fija en el pie y navbar
        layout_principal = ft.Column(
            [
                # Navbar integrado
                navbar,
                
                # Encabezado del chat
                encabezado,
                
                # Área de chat con desplazamiento
                ft.Container(
                    content=area_chat,
                    expand=True,
                ),
                
                # Área de entrada FIJA EN EL PIE
                area_entrada
            ],
            expand=True
        )
        
        contenedor_principal = ft.Container(
            layout_principal,
            border_radius=15,
            bgcolor=colores["fondo_tarjeta"],
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=15,
                color=colores["sombra"],
                offset=ft.Offset(0, 0),
                blur_style=ft.ShadowBlurStyle.OUTER
            ),
            expand=True
        )
        
        # Solo mostrar error si no se cargó el CSV
        if df_csv is None:
            error_bubble = self.create_message_bubble(
                "Error", 
                f"No se pudo cargar ningún archivo CSV: {csv_info}",
                False
            )
            chat.controls.append(error_bubble)
        
        return contenedor_principal

# Función principal para ejecutar la aplicación





    


# ---------------------------
# CONTROLADOR DE NAVEGACIÓN
# ---------------------------
class NavigationController:
    page: ft.Page = None
    content_container: ft.Container = None
    current_page_instance = None  # Para mantener la instancia actual

    @classmethod
    def initialize(cls, page: ft.Page, container: ft.Container):
        cls.page = page
        cls.content_container = container

    @classmethod
    def update_view(cls, view_name: str, data: str = ""):
        # Limpiar la instancia anterior
        cls.current_page_instance = None
        
        #Ya no es necesario el build que hablia formado porque cree 
        if view_name == "Inicio":
            cls.current_page_instance = HomePage(cls.page)

        elif view_name == "Login":
            cls.current_page_instance = LoginPage(cls.page)  # Solo instancia, sin build porque el cuerpo de la pagina ya fue creado en base page

        elif view_name == "Registro":
            cls.current_page_instance = RegistrationPage(cls.page)  # Solo instancia

        elif view_name == "Notas":
            cls.current_page_instance = NotesPage(cls.page)

        elif view_name == "DetalleAsignatura":
            cls.current_page_instance = SubjectDetailPage(cls.page, data)

        elif view_name == "Calendario":
            cls.current_page_instance = CalendarPage(cls.page)

        elif view_name in ("Tecnicas", "Metodos"):
            cls.current_page_instance = StudyMethodsPage(cls.page, techniques)

        elif view_name == "Clases":
            cls.current_page_instance = ClassesPage(cls.page)

        elif view_name == "ClassDetail":
            cls.current_page_instance = ClassDetailPage(cls.page, data)

        elif view_name == "Recuperar":
            cls.current_page_instance = RecuperarContrasenaPage(cls.page)

        elif view_name == "Perfil":
            cls.current_page_instance = UserProfilePage(cls.page, current_user)

        elif view_name == "Mensajeria":
            cls.current_page_instance = MessagingPage(cls.page)

        elif view_name == "ChatBot":
            cls.current_page_instance = ChatBotPage(cls.page)

        else:
            cls.current_page_instance = HomePage(cls.page)

        # Construir el contenido SOLO UNA VEZ
        if cls.current_page_instance:
            cls.content_container.content = cls.current_page_instance.build()
        
        # Actualizar la página
        cls.page.update()



# ---------------------------
# FUNCIÓN PRINCIPAL
# ---------------------------
def main(page:ft.Page):
    page.title="Point List App"; page.bgcolor="#F3F3F3"; page.theme_mode=ft.ThemeMode.LIGHT; page.scroll=ft.ScrollMode.AUTO
    content_container=ft.Container(expand=True)
    content_container.content=LoginPage(page).build()
    NavigationController.initialize(page,content_container)
    page.add(content_container)

ft.app(target=main, assets_dir="assets")
